{"version":3,"sources":["constants/productConstants.js","constants/cartConstants.js","constants/userConstants.js","constants/orderConstants.js","store.js","reducers/productReducers.js","reducers/cartReducers.js","reducers/userReducers.js","reducers/orderReducers.js","components/SearchBox.js","actions/userActions.js","components/Header.js","components/Footer.js","components/Rating.js","components/Product.js","components/Loader.js","components/Message.js","components/Paginate.js","components/Meta.js","actions/productActions.js","components/ProductCarousel.js","screens/HomeScreen.js","screens/ProductScreen.js","actions/cartActions.js","screens/CartScreen.js","components/FormContainer.js","screens/LoginScreen.js","screens/RegisterScreen.js","screens/ProfileScreen.js","actions/orderActions.js","components/CheckoutSteps.js","screens/ShippingScreen.js","screens/PaymentScreen.js","screens/PlaceOrderScreen.js","screens/OrderScreen.js","screens/UserListScreen.js","screens/UserEditScreen.js","screens/ProductListScreen.js","screens/ProductEditScreen.js","screens/OrderListScreen.js","App.js","reportWebVitals.js","index.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_DELETE_REQUEST","PRODUCT_DELETE_SUCCESS","PRODUCT_DELETE_FAIL","PRODUCT_CREATE_REQUEST","PRODUCT_CREATE_SUCCESS","PRODUCT_CREATE_FAIL","PRODUCT_CREATE_RESET","PRODUCT_UPDATE_REQUEST","PRODUCT_UPDATE_SUCCESS","PRODUCT_UPDATE_FAIL","PRODUCT_UPDATE_RESET","PRODUCT_CREATE_REVIEW_REQUEST","PRODUCT_CREATE_REVIEW_SUCCESS","PRODUCT_CREATE_REVIEW_FAIL","PRODUCT_CREATE_REVIEW_RESET","PRODUCT_TOP_REQUEST","PRODUCT_TOP_SUCCESS","PRODUCT_TOP_FAIL","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_RESET","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_SUCCESS","ORDER_PAY_FAIL","ORDER_PAY_RESET","ORDER_LIST_MY_REQUEST","ORDER_LIST_MY_SUCCESS","ORDER_LIST_MY_FAIL","ORDER_LIST_MY_RESET","ORDER_LIST_REQUEST","ORDER_LIST_SUCCESS","ORDER_LIST_FAIL","ORDER_DELIVER_REQUEST","ORDER_DELIVER_SUCCESS","ORDER_DELIVER_FAIL","ORDER_DELIVER_RESET","reducer","combineReducers","productList","state","products","action","type","loading","payload","pages","page","error","productDetails","product","reviews","productDelete","success","productCreate","productUpdate","productReviewCreate","productTopRated","cart","cartItems","shippingAddress","item","console","log","existItem","find","x","map","filter","paymentMethod","userLogin","userInfo","userRegister","userDetails","user","userUpdateProfile","userList","users","userDelete","userUpdate","orderCreate","order","orderDetails","orderItems","orderPay","orderDeliver","orderListMy","orders","orderList","cartItemFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","initialState","midleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","SearchBox","history","useState","keyword","setKeyword","Form","onSubmit","e","preventDefault","trim","push","inline","Control","name","onChange","target","value","placeholder","className","Button","variant","getUserDetails","id","dispatch","getState","a","config","headers","Authorization","token","axios","get","data","response","message","Header","useDispatch","useSelector","Navbar","bg","expand","collapseOnSelect","Container","to","Brand","Toggle","aria-controls","Collapse","render","Nav","Link","NavDropdown","title","Item","onClick","removeItem","isAdmin","Footer","Row","Col","Rating","text","color","style","defaultProps","Product","Card","_id","Img","src","image","Body","Title","as","Text","rating","numReviews","price","Loader","Spinner","animation","role","width","height","margin","display","Message","children","Alert","Paginate","Pagination","Array","keys","active","Meta","description","keywords","Helmet","content","defautProps","listProducts","pageNumber","listProductsDetails","ProductCarousel","useEffect","Carousel","pause","Image","alt","fluid","Caption","HomeScreen","match","params","sm","md","lg","xl","ProductScreen","qty","setQty","comment","setComment","setRating","errorProductReview","successProductReview","alert","ListGroup","countInStock","padding","disabled","lenght","review","createdAt","substring","productId","post","Group","controlId","Label","row","addToCart","setItem","stringify","CartScreen","location","search","Number","split","removeFromCartHandler","removeFromCart","length","rounded","reduce","acc","toFixed","FormContainer","xs","LoginScreen","email","setEmail","password","setPassword","redirect","login","RegisterScreen","setName","confirmPassword","setConfirmPassword","setMessage","register","ProfileScreen","loadingOrders","errorOrders","put","updateUserProfile","Table","striped","bordered","hover","responsive","totalPrice","isPaid","paidAt","isDelivered","deliveredAt","CheckoutSteps","step1","step2","step3","step4","ShippingScreen","address","setAddress","city","setCity","postalCode","setPostalCode","country","setCountry","required","PaymentScreen","setPaymentMethod","Check","label","checked","PlaceOrderScreen","addDecimals","num","Math","round","itemsPrice","shippingPrice","taxPrice","index","createOrder","OrderScreen","orderId","sdkReady","setSdkReady","successPay","loadingPay","successDeliver","loadingDeliver","addPayPalScript","clientId","script","document","createElement","async","onload","body","appendChild","window","paypal","href","amount","onSuccess","paymentResult","payOrder","deliverOrder","UserListScreen","successDelete","deleteHandker","confirm","delete","deleteUser","UserEditScreen","userId","setIsAdmin","successUpdate","loadingUpdate","errorUpdate","varaint","Error","updateUser","ProductListScreen","errorDelete","loadingDelete","errorCreate","loadingCreate","successCreate","createdProduct","deleteProduct","category","brand","ProductEditScreen","setPrice","setImage","setBrand","setCategory","setCountInStock","setDescription","uploading","setUploading","uploadFileHandler","file","files","formData","FormData","append","updateProduct","File","custom","OrderListScreen","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.8a5f3855.chunk.js","sourcesContent":["//константы которые будут использоватся в редусере и компоненте productReducers\r\nexport const PRODUCT_LIST_REQUEST = 'PRODUCT_LIST_REQUEST'\r\nexport const PRODUCT_LIST_SUCCESS = 'PRODUCT_LIST_SUCCESS'\r\nexport const PRODUCT_LIST_FAIL = 'PRODUCT_LIST_FAIL'\r\n\r\n//for each product\r\nexport const PRODUCT_DETAILS_REQUEST = 'PRODUCT_DETAILS_REQUEST'\r\nexport const PRODUCT_DETAILS_SUCCESS = 'PRODUCT_DETAILS_SUCCESS'\r\nexport const PRODUCT_DETAILS_FAIL = 'PRODUCT_DETAILS_FAIL'\r\n\r\n//для удаления продукт\r\nexport const PRODUCT_DELETE_REQUEST = 'PRODUCT_DELETE_REQUEST'\r\nexport const PRODUCT_DELETE_SUCCESS = 'PRODUCT_DELETE_SUCCESS'\r\nexport const PRODUCT_DELETE_FAIL = 'PRODUCT_DELETE_FAIL'\r\n\r\n\r\n//для создания образца нового продукта\r\nexport const PRODUCT_CREATE_REQUEST = 'PRODUCT_CREATE_REQUEST'\r\nexport const PRODUCT_CREATE_SUCCESS = 'PRODUCT_CREATE_SUCCESS'\r\nexport const PRODUCT_CREATE_FAIL = 'PRODUCT_CREATE_FAIL'\r\nexport const PRODUCT_CREATE_RESET = 'PRODUCT_CREATE_RESET'\r\n\r\n\r\n//для изменения данных о продукте образца нового продукта\r\nexport const PRODUCT_UPDATE_REQUEST = 'PRODUCT_UPDATE_REQUEST'\r\nexport const PRODUCT_UPDATE_SUCCESS = 'PRODUCT_UPDATE_SUCCESS'\r\nexport const PRODUCT_UPDATE_FAIL = 'PRODUCT_UPDATE_FAIL'\r\nexport const PRODUCT_UPDATE_RESET = 'PRODUCT_UPDATE_RESET'\r\n\r\n\r\n//для добавления отзыва о продукте \r\nexport const PRODUCT_CREATE_REVIEW_REQUEST = 'PRODUCT_CREATE_REVIEW_REQUEST'\r\nexport const PRODUCT_CREATE_REVIEW_SUCCESS = 'PRODUCT_CREATE_REVIEW_SUCCESS'\r\nexport const PRODUCT_CREATE_REVIEW_FAIL = 'PRODUCT_CREATE_REVIEW_FAIL'\r\nexport const PRODUCT_CREATE_REVIEW_RESET = 'PRODUCT_CREATE_REVIEW_RESET'\r\n\r\n// для рейтинга продуктов\r\nexport const PRODUCT_TOP_REQUEST = 'PRODUCT_TOP_REQUEST'\r\nexport const PRODUCT_TOP_SUCCESS = 'PRODUCT_TOP_SUCCESS'\r\nexport const PRODUCT_TOP_FAIL = 'PRODUCT_TOP_FAIL'","export const CART_ADD_ITEM = 'CART_ADD_ITEM'\r\nexport const CART_REMOVE_ITEM = 'CART_REMOVE_ITEM'\r\n\r\n\r\n// сохраняем адресс отправки\r\nexport const CART_SAVE_SHIPPING_ADDRESS = 'CART_SAVE_SHIPPING_ADDRESS'\r\n\r\n// сохраняем мето оплаты отправки\r\nexport const CART_SAVE_PAYMENT_METHOD = 'CART_SAVE_PAYMENT_METHOD'","//для входа зврегистрированых пользователей\r\nexport const  USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST'\r\nexport const  USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS'\r\nexport const  USER_LOGIN_FAIL = 'USER_LOGIN_FAIL'\r\nexport const USER_LOGOUT = 'USER_LOGOUT'\r\n\r\n//для регистрации пользователей\r\nexport const  USER_REGISTER_REQUEST = 'USER_REGISTER_REQUEST'\r\nexport const  USER_REGISTER_SUCCESS = 'USER_REGISTER_SUCCESS'\r\nexport const  USER_REGISTER_FAIL = 'USER_REGISTER_FAIL'\r\n\r\n// для выведения  данных пользователя в профиле\r\nexport const  USER_DETAILS_REQUEST = 'USER_DETAILS_REQUEST'\r\nexport const  USER_DETAILS_SUCCESS = 'USER_DETAILS_SUCCESS'\r\nexport const  USER_DETAILS_FAIL = 'USER_DETAILS_FAIL'\r\nexport const  USER_DETAILS_RESET = 'USER_DETAILS_RESET'\r\n\r\n\r\n// для изменения  данных пользователя в профиле\r\nexport const  USER_UPDATE_PROFILE_REQUEST = 'USER_UPDATE_PROFILE_REQUEST'\r\nexport const  USER_UPDATE_PROFILE_SUCCESS = 'USER_UPDATE_PROFILE_SUCCESS'\r\nexport const  USER_UPDATE_PROFILE_FAIL = 'USER_UPDATE_PROFILE_FAIL'\r\n// для ресеета профиля пользователя в стейте\r\nexport const  USER_UPDATE_PROFILE_RESET = 'USER_UPDATE_PROFILE_RESET'\r\n\r\n\r\n//для получения списка пользователей\r\nexport const  USER_LIST_REQUEST = 'USER_LIST_REQUEST'\r\nexport const  USER_LIST_SUCCESS = 'USER_LIST_SUCCESS'\r\nexport const  USER_LIST_FAIL = 'USER_LIST_FAIL'\r\nexport const  USER_LIST_RESET = 'USER_LIST_RESET'\r\n\r\n\r\n//для удаления пользователя по айди \r\nexport const  USER_DELETE_REQUEST = 'USER_DELETE_REQUEST'\r\nexport const  USER_DELETE_SUCCESS = 'USER_DELETE_SUCCESS'\r\nexport const  USER_DELETE_FAIL = 'USER_DELETE_FAIL'\r\n\r\n\r\n//для изменения данных пользователя администратором\r\nexport const  USER_UPDATE_REQUEST = 'USER_UPDATE_REQUEST'\r\nexport const  USER_UPDATE_SUCCESS = 'USER_UPDATE_SUCCESS'\r\nexport const  USER_UPDATE_FAIL = 'USER_UPDATE_FAIL'\r\nexport const  USER_UPDATE_RESET = 'USER_UPDATE_RESET'","export const ORDER_CREATE_REQUEST = 'ORDER_CREATE_REQUEST'\r\nexport const ORDER_CREATE_SUCCESS = 'ORDER_CREATE_SUCCESS'\r\nexport const ORDER_CREATE_FAIL = 'ORDER_CREATE_FAIL'\r\n\r\nexport const ORDER_DETAILS_REQUEST = 'ORDER_DETAILS_REQUEST'\r\nexport const ORDER_DETAILS_SUCCESS = 'ORDER_DETAILS_SUCCESS'\r\nexport const ORDER_DETAILS_FAIL = 'ORDER_DETAILS_FAIL'\r\n\r\nexport const ORDER_PAY_REQUEST = 'ORDER_PAY_REQUEST'\r\nexport const ORDER_PAY_SUCCESS = 'ORDER_PAY_SUCCESS'\r\nexport const ORDER_PAY_FAIL = 'ORDER_PAY_FAIL'\r\nexport const ORDER_PAY_RESET = 'ORDER_PAY_RESET'\r\n\r\nexport const ORDER_LIST_MY_REQUEST = 'ORDER_LIST_MY_REQUEST'\r\nexport const ORDER_LIST_MY_SUCCESS = 'ORDER_LIST_MY_SUCCESS'\r\nexport const ORDER_LIST_MY_FAIL = 'ORDER_LIST_MY_FAIL'\r\nexport const ORDER_LIST_MY_RESET = 'ORDER_LIST_MY_RESET'\r\n\r\n//для списка всех продуктов\r\nexport const ORDER_LIST_REQUEST = 'ORDER_LIST_REQUEST'\r\nexport const ORDER_LIST_SUCCESS = 'ORDER_LIST_SUCCESS'\r\nexport const ORDER_LIST_FAIL = 'ORDER_LIST_FAIL'\r\n\r\n//для изменения что продукт отправлен\r\nexport const ORDER_DELIVER_REQUEST = 'ORDER_DELIVER_REQUEST'\r\nexport const ORDER_DELIVER_SUCCESS = 'ORDER_DELIVER_SUCCESS'\r\nexport const ORDER_DELIVER_FAIL = 'ORDER_DELIVER_FAIL'\r\nexport const ORDER_DELIVER_RESET = 'ORDER_DELIVER_RESET'\r\n","//aфайл где будем соеденять наши редусеры applyMiddleware  для thunk\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport {productListReducer, \r\n        productDetailsReducer,\r\n        productDeleteReducer,\r\n        productCreateReducer,\r\n        productUpdateReducer,\r\n        productReviewCreateReducer,\r\n        productTopRatedReducer,\r\n    } from './reducers/productReducers'\r\nimport {cartReducer} from './reducers/cartReducers'\r\nimport { \r\n    userLoginReducer, \r\n    userRegisterReducer, \r\n    userDetailsReducer, \r\n    userUpdateProfileReducer,\r\n    userListReducer,\r\n    userDeleteReducer,\r\n    userUpdateReducer,\r\n} from './reducers/userReducers'\r\nimport { \r\n    orderCreateReducer, \r\n    orderDetailsReducer,\r\n    orderPayReducer,\r\n    orderDeliverReducer,\r\n    orderListMyReducer,\r\n    orderListReducer,\r\n } from './reducers/orderReducers'\r\n\r\n// постоянная в которую мы будем перелавать наши редьюсеры; preloadedState\r\nconst reducer = combineReducers({\r\n    productList: productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    productDelete: productDeleteReducer,\r\n    productCreate: productCreateReducer,\r\n    productUpdate: productUpdateReducer,\r\n    productReviewCreate: productReviewCreateReducer,\r\n    productTopRated: productTopRatedReducer,\r\n\r\n\r\n\r\n    cart: cartReducer,\r\n\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userDetails: userDetailsReducer,\r\n    userUpdateProfile: userUpdateProfileReducer,\r\n    userList: userListReducer,\r\n    userDelete: userDeleteReducer,\r\n    userUpdate: userUpdateReducer,\r\n\r\n    orderCreate: orderCreateReducer,\r\n    orderDetails: orderDetailsReducer,\r\n    orderPay: orderPayReducer,\r\n    orderDeliver: orderDeliverReducer,\r\n    orderListMy: orderListMyReducer,\r\n    orderList: orderListReducer,\r\n\r\n})\r\n\r\n//  получаем из Storage обьявленого в cartAction \r\n// если данные в Storage есть, то мы их приводим к читаемому виду, если нет то получаем пустой массив\r\n    const cartItemFromStorage = localStorage.getItem('cartItems') ? \r\n    JSON.parse(localStorage.getItem('cartItems')) \r\n    :[]\r\n\r\n    //  получаем из Storage обьявленого в userAction проверяем есть ли такие данные\r\n    const userInfoFromStorage = localStorage.getItem('userInfo') ? \r\n    JSON.parse(localStorage.getItem('userInfo')) \r\n    :null\r\n\r\n    // при инициализации store если что-то есть в localStorage связаное с shippingAddress хотим добавлять это в стейт\r\n    const shippinAddressFromStorage = localStorage.getItem('shippingAddress') ? \r\n    JSON.parse(localStorage.getItem('shippingAddress')) \r\n    : {}\r\n\r\n// для записи продуктов,  token, пользователей, для предзагрузки\r\nconst initialState = {\r\n    cart: {cartItems: cartItemFromStorage, shippingAddress: shippinAddressFromStorage },\r\n    userLogin: {userInfo: userInfoFromStorage},\r\n}\r\n\r\n//массив в который будут добавляться все midleware\r\nconst midleware = [thunk]\r\n\r\nconst store = createStore(\r\nreducer,\r\ninitialState,\r\ncomposeWithDevTools(applyMiddleware(...midleware)))\r\n \r\nexport default store","import { PRODUCT_LIST_REQUEST,\r\n         PRODUCT_LIST_SUCCESS, \r\n         PRODUCT_LIST_FAIL, \r\n         PRODUCT_DETAILS_REQUEST,\r\n         PRODUCT_DETAILS_SUCCESS,\r\n         PRODUCT_DETAILS_FAIL,\r\n         PRODUCT_DELETE_REQUEST,\r\n         PRODUCT_DELETE_SUCCESS,\r\n         PRODUCT_DELETE_FAIL,\r\n         PRODUCT_CREATE_REQUEST,\r\n         PRODUCT_CREATE_SUCCESS,\r\n         PRODUCT_CREATE_FAIL,\r\n         PRODUCT_CREATE_RESET,\r\n         PRODUCT_UPDATE_REQUEST,\r\n         PRODUCT_UPDATE_SUCCESS,\r\n         PRODUCT_UPDATE_FAIL,\r\n         PRODUCT_UPDATE_RESET,\r\n         PRODUCT_CREATE_REVIEW_REQUEST,\r\n         PRODUCT_CREATE_REVIEW_SUCCESS,\r\n         PRODUCT_CREATE_REVIEW_FAIL,\r\n         PRODUCT_CREATE_REVIEW_RESET,\r\n         PRODUCT_TOP_REQUEST,\r\n         PRODUCT_TOP_SUCCESS,\r\n         PRODUCT_TOP_FAIL,\r\n        } from '../constants/productConstants'\r\n\r\n\r\n//Reducer для продуктов выступает как стейт, action - то что мы диспатчим\r\nexport const productListReducer = (state = { products: [] }, action) => {\r\n    switch(action.type) {\r\n        //при запросе на сервер\r\n        case PRODUCT_LIST_REQUEST :\r\n            return {\r\n                loading: true,\r\n                products: []\r\n            } \r\n        //при успешном запросе\r\n        case PRODUCT_LIST_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                products: action.payload.products,\r\n                pages: action.payload.pages,\r\n                page: action.payload.page,\r\n            }\r\n            // при ошибке\r\n        case PRODUCT_LIST_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:  return  state \r\n    }\r\n}\r\n\r\n\r\n//Reducer для продукта выступает как стейт, action - то что мы диспатчим, revies - отзывы которые мы будем передавать\r\nexport const productDetailsReducer = (state = { product: { reviews: [] } }, action) => {\r\n    switch(action.type) {\r\n        //при запросе на сервер, будем добавлять все в текущее  состояние\r\n        case PRODUCT_DETAILS_REQUEST :\r\n            return {\r\n                ...state,\r\n                loading: true, \r\n            } \r\n        //при успешном запросе\r\n        case PRODUCT_DETAILS_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                product: action.payload,\r\n            }\r\n            // при ошибке\r\n        case PRODUCT_DETAILS_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:  return state \r\n    }\r\n}\r\n\r\n\r\n//Reducer для продукта выступает как стейт, action - то что мы диспатчим, revies - отзывы которые мы будем передавать\r\n// для удаления подукта по айди\r\nexport const productDeleteReducer = (state = {}, action) => {\r\n    switch(action.type) {\r\n        //при запросе на сервер, будем добавлять все в текущее  состояние\r\n        case PRODUCT_DELETE_REQUEST :\r\n            return {\r\n                loading: true,\r\n            } \r\n        //при успешном запросе\r\n        case PRODUCT_DELETE_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                success: true,\r\n            }\r\n            // при ошибке\r\n        case PRODUCT_DELETE_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:  return  state \r\n    }\r\n}\r\n\r\n\r\n\r\n// для создания нового продукта \r\nexport const productCreateReducer = (state = {}, action) => {\r\n    switch(action.type) {\r\n        //при запросе на сервер, будем добавлять все в текущее  состояние\r\n        case PRODUCT_CREATE_REQUEST:\r\n            return {\r\n                loading: true,\r\n            } \r\n        //при успешном запросе\r\n        case PRODUCT_CREATE_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                success: true,\r\n                product: action.payload,\r\n            }\r\n            // при ошибке\r\n        case PRODUCT_CREATE_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case PRODUCT_CREATE_RESET: \r\n            return {}\r\n        default:  return state \r\n    }\r\n}\r\n\r\n\r\n// для редактирования данных  продукта \r\nexport const productUpdateReducer = (state = { product: {} }, action) => {\r\n    switch(action.type) {\r\n        //при запросе на сервер, будем добавлять все в текущее  состояние\r\n        case PRODUCT_UPDATE_REQUEST:\r\n            return {\r\n                loading: true,\r\n            } \r\n        //при успешном запросе\r\n        case PRODUCT_UPDATE_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                success: true,\r\n                product: action.payload,\r\n            }\r\n            // при ошибке\r\n        case PRODUCT_UPDATE_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case PRODUCT_UPDATE_RESET: \r\n            return { product: {} }\r\n        default:  return state \r\n    }\r\n}\r\n\r\n\r\n\r\n// для редактирования данных  продукта \r\nexport const productReviewCreateReducer = (state = {}, action) => {\r\n    switch(action.type) {\r\n        //при запросе на сервер, будем добавлять все в текущее  состояние\r\n        case PRODUCT_CREATE_REVIEW_REQUEST:\r\n            return {\r\n                loading: true,\r\n            } \r\n        //при успешном запросе\r\n        case PRODUCT_CREATE_REVIEW_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                success: true,\r\n            }\r\n            // при ошибке\r\n        case PRODUCT_CREATE_REVIEW_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case PRODUCT_CREATE_REVIEW_RESET: \r\n            return {}\r\n        default:  return state \r\n    }\r\n}\r\n\r\n\r\n\r\n// для ролучения продуктов по рейтингу \r\nexport const productTopRatedReducer = (state = { products: [] }, action) => {\r\n    switch(action.type) {\r\n        //при запросе на сервер, будем добавлять все в текущее  состояние\r\n        case PRODUCT_TOP_REQUEST:\r\n            return {\r\n                loading: true,\r\n                products: [],\r\n            } \r\n        //при успешном запросе\r\n        case PRODUCT_TOP_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                products: action.payload\r\n            }\r\n            // при ошибке\r\n        case PRODUCT_TOP_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:  return state \r\n    }\r\n}","import {CART_ADD_ITEM, \r\n    CART_REMOVE_ITEM, \r\n    CART_SAVE_SHIPPING_ADDRESS, \r\n    CART_SAVE_PAYMENT_METHOD,\r\n} from '../constants/cartConstants'\r\n\r\nexport const cartReducer = (state = {cartItems: [], shippingAddress: {}}, action) => {\r\n\r\n    switch (action.type) {\r\n        case CART_ADD_ITEM: \r\n            const item = action.payload \r\n            \r\n            console.log('state',...state.cartItems);\r\n            console.log('item', item);\r\n\r\n            //существует ли продукт\r\n            // для каждого айтема в state который соответствует текущему item\r\n            const existItem = state.cartItems.find((x) => x.product === item.product )\r\n            \r\n            if(existItem) {\r\n            console.log('item from if', item);\r\n\r\n                return {\r\n                    ...state,\r\n                    //если текущая итерация текущего идентификатора элемента равна существующему элементу item.product,\r\n                    // который является идентификатором, тогда мы просто вернем элемент для этой итерации.\r\n                    //проходит по элементам корзины, если такой продукт уже есть в корзине то вернет его, если нет, то вернет итерируемый элемент\r\n                    cartItems: state.cartItems.map( x => x.product === existItem.product ? item : x)\r\n                } \r\n            } \r\n            // если не присутствует, то мы добавляем в массив новый item\r\n            else {\r\n            console.log('item from else', item)\r\n                return {\r\n                    ...state,\r\n                    cartItems: [...state.cartItems, item]\r\n                }\r\n            }\r\n\r\n            case CART_REMOVE_ITEM: \r\n            return {\r\n                ...state,\r\n                //возвращает все элементы которые соответствуют данному условию, а именно не совпадают с указанным айди action.payload\r\n                cartItems: state.cartItems.filter(x => x.product !== action.payload)\r\n            }\r\n\r\n            case CART_SAVE_SHIPPING_ADDRESS: \r\n            return {\r\n                ...state,\r\n                shippingAddress: action.payload,\r\n            }\r\n\r\n            case CART_SAVE_PAYMENT_METHOD: \r\n            return {\r\n                ...state,\r\n                paymentMethod: action.payload,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import {\r\n    USER_LOGIN_REQUEST, \r\n    USER_LOGIN_SUCCESS, \r\n    USER_LOGIN_FAIL, \r\n    USER_LOGOUT,\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_DETAILS_RESET,\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n    USER_UPDATE_RESET\r\n\r\n} from '../constants/userConstants'\r\n\r\n//Reducer для продуктов выступает как стейт, action - то что мы диспатчим\r\n//Для проверки зарегистрированых пользователей\r\nexport const userLoginReducer = (state = {}, action) => {\r\n    switch(action.type) {\r\n        //при запросе на сервер\r\n        case USER_LOGIN_REQUEST :\r\n            return {\r\n                loading: true,\r\n            } \r\n        //при успешном запросе\r\n        case USER_LOGIN_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                userInfo: action.payload, \r\n            }\r\n            // при ошибке\r\n        case USER_LOGIN_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n            // для выхода из системы\r\n        case USER_LOGOUT:\r\n                return {}\r\n                \r\n        default: \r\n         return state \r\n    }\r\n}\r\n\r\n\r\n//Reducer для регистрации пользователей выступает как стейт, action - то что мы диспатчим\r\nexport const userRegisterReducer = (state = {}, action) => {\r\n    switch(action.type) {\r\n        //при запросе на сервер\r\n        case USER_REGISTER_REQUEST :\r\n            return {\r\n                loading: true,\r\n            } \r\n        //при успешном запросе\r\n        case USER_REGISTER_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                userInfo: action.payload, \r\n            }\r\n            // при ошибке\r\n        case USER_REGISTER_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }   \r\n        default: \r\n         return state \r\n    }\r\n}\r\n\r\n// для вывода данных пользователя в профиле \r\nexport const userDetailsReducer = (state = {user: {}}, action) => {\r\n\r\n    switch(action.type) {\r\n        //при запросе на сервер\r\n        case USER_DETAILS_REQUEST :\r\n            return {\r\n                //то что находиться в начальном состоянии а именно user: {}\r\n                ...state,\r\n                 loading: true,\r\n            } \r\n        //при успешном запросе\r\n        case USER_DETAILS_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                user: action.payload, \r\n            }\r\n            // при ошибке\r\n        case USER_DETAILS_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }   \r\n        case USER_DETAILS_RESET: \r\n            return { user: {}}    \r\n        default: \r\n         return state \r\n    }\r\n}\r\n\r\n\r\n// для изменения данных профиля  \r\nexport const userUpdateProfileReducer = (state = {}, action) => {\r\n\r\n    switch(action.type) {\r\n        //при запросе на сервер\r\n        case USER_UPDATE_PROFILE_REQUEST :\r\n            return {\r\n                loading: true,\r\n            } \r\n        //при успешном запросе\r\n        case USER_UPDATE_PROFILE_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                success: true,\r\n                userInfo: action.payload, \r\n            }\r\n            // при ошибке\r\n        case USER_UPDATE_PROFILE_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }   \r\n        default: \r\n         return state \r\n    }\r\n}\r\n\r\n\r\n\r\n// для вывода списка пользователей \r\nexport const userListReducer = (state = {users: []}, action) => {\r\n\r\n    switch(action.type) {\r\n        //при запросе на сервер\r\n        case USER_LIST_REQUEST :\r\n            return {\r\n                loading: true,\r\n            } \r\n        //при успешном запросе\r\n        case USER_LIST_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                users: action.payload, \r\n            }\r\n            // при ошибке\r\n        case USER_LIST_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }  \r\n        case USER_LIST_RESET :\r\n            return { users:[] }\r\n        default: \r\n         return state \r\n    }\r\n}\r\n\r\n\r\n// для вывода списка пользователей \r\nexport const userDeleteReducer = (state = {}, action) => {\r\n\r\n    switch(action.type) {\r\n        //при запросе на сервер\r\n        case USER_DELETE_REQUEST :\r\n            return {\r\n                loading: true,\r\n            } \r\n        //при успешном запросе\r\n        case USER_DELETE_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                success: true, \r\n            }\r\n            // при ошибке\r\n        case USER_DELETE_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }  \r\n        default: \r\n         return state \r\n    }\r\n}\r\n\r\n\r\n\r\n// для изменения данных пользователя админом \r\nexport const userUpdateReducer = (state = { user: {} }, action) => {\r\n\r\n    switch(action.type) {\r\n        //при запросе на сервер\r\n        case USER_UPDATE_REQUEST:\r\n            return {\r\n                loading: true,\r\n            } \r\n        //при успешном запросе\r\n        case USER_UPDATE_SUCCESS: \r\n            return {\r\n                loading: false,\r\n                success: true \r\n            }\r\n            // при ошибке\r\n        case USER_UPDATE_FAIL: \r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }  \r\n        case USER_UPDATE_RESET: \r\n            return {\r\n                user: {}\r\n            }\r\n        default: \r\n         return state \r\n    }\r\n}","import { \r\n    ORDER_CREATE_REQUEST, \r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_RESET,\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_RESET,\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n    ORDER_DELIVER_REQUEST,\r\n    ORDER_DELIVER_SUCCESS,\r\n    ORDER_DELIVER_FAIL,\r\n    ORDER_DELIVER_RESET,\r\n} from \"../constants/orderConstants\";\r\n\r\n    export const orderCreateReducer = (state = {}, action) => {\r\n        switch(action.type) {\r\n            case ORDER_CREATE_REQUEST:\r\n                return {\r\n                    loading: true\r\n                }\r\n\r\n            case ORDER_CREATE_SUCCESS: \r\n                return {\r\n                    loading: false,\r\n                    success: true,\r\n                    order: action.payload\r\n                }\r\n\r\n            case ORDER_CREATE_FAIL: \r\n                return {\r\n                    loading: false,\r\n                    error: action.payload\r\n                }    \r\n\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n    //loading: true - для того чтоб загрузка началась до того как начнет загружаться\r\n    export const orderDetailsReducer = (state = {loading: true, orderItems: [], shippingAddress: {}}, action) => {\r\n        switch(action.type) {\r\n            case ORDER_DETAILS_REQUEST:\r\n                //...state, чтоб не было ошибок при загрузке\r\n                return {\r\n                    ...state,\r\n                    loading: true\r\n                }\r\n\r\n            case ORDER_DETAILS_SUCCESS: \r\n                return {\r\n                    loading: false,\r\n                    order: action.payload\r\n                }\r\n\r\n            case ORDER_DETAILS_FAIL: \r\n                return {\r\n                    loading: false,\r\n                    error: action.payload\r\n                }    \r\n\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n\r\n\r\n    export const orderPayReducer = (state = {}, action) => {\r\n        switch(action.type) {\r\n            case ORDER_PAY_REQUEST:\r\n                //...state, чтоб не было ошибок при загрузке\r\n                return {\r\n                    loading: true\r\n                }\r\n\r\n            case ORDER_PAY_SUCCESS: \r\n                return {\r\n                    loading: false,\r\n                    success: true,\r\n                }\r\n\r\n            case ORDER_PAY_FAIL: \r\n                return {\r\n                    loading: false,\r\n                    error: action.payload,\r\n                }    \r\n            case ORDER_PAY_RESET: \r\n                return {}\r\n\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n    export const orderDeliverReducer = (state = {}, action) => {\r\n        \r\n        switch (action.type) {\r\n            case ORDER_DELIVER_REQUEST:\r\n                return {\r\n                    loading: true,\r\n                }\r\n            case ORDER_DELIVER_SUCCESS:\r\n                return {\r\n                    loading: false, \r\n                    success: true,\r\n                }  \r\n            case ORDER_DELIVER_FAIL: \r\n                return {\r\n                    loading: false,\r\n                    error: action.payload,\r\n                }\r\n            case ORDER_DELIVER_RESET:\r\n                return {}\r\n            default:\r\n                return state\r\n                \r\n        }\r\n    } \r\n\r\n\r\n    export const orderListMyReducer = (state = {orders:[]}, action) => {\r\n        switch(action.type) {\r\n            case ORDER_LIST_MY_REQUEST:\r\n                //...state, чтоб не было ошибок при загрузке\r\n                return {\r\n                    loading: true\r\n                }\r\n\r\n            case ORDER_LIST_MY_SUCCESS: \r\n                return {\r\n                    loading: false,\r\n                    orders: action.payload,\r\n                }\r\n\r\n            case ORDER_LIST_MY_FAIL: \r\n                return {\r\n                    loading: false,\r\n                    error: action.payload,\r\n                }   \r\n            case ORDER_LIST_MY_RESET: \r\n                return {orders: []}\r\n\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n\r\n\r\n    export const orderListReducer = (state = { orders: [] }, action) => {\r\n        \r\n        switch (action.type) {\r\n            case ORDER_LIST_REQUEST:\r\n                return {\r\n                    loading: true,\r\n                }\r\n            case ORDER_LIST_SUCCESS:\r\n                return {\r\n                    loading: false, \r\n                    orders: action.payload,\r\n                }  \r\n            case ORDER_LIST_FAIL: \r\n                return {\r\n                    loading: false,\r\n                    error: action.payload,\r\n                }\r\n            default:\r\n                return state\r\n                \r\n        }\r\n    } \r\n\r\n\r\n    ","import React, {useState} from 'react'\r\nimport {Form, Button} from 'react-bootstrap'\r\n\r\nconst SearchBox = ({history}) => {\r\n\r\n    const [keyword, setKeyword] = useState('')\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(keyword.trim()) {\r\n            history.push(`/search/${keyword}`)\r\n        } else {\r\n            history.push('/')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={submitHandler} inline>\r\n            <Form.Control \r\n            type='text' \r\n            name='q' \r\n            onChange={e => setKeyword(e.target.value)}\r\n            placeholder='Search a Products...'\r\n            className='mr-sm-2 ml-sm-5'></Form.Control>\r\n            <Button type='submit' variant='outline-success' className='p-2'>\r\n                Search\r\n            </Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import axios from \"axios\"\r\nimport { USER_DETAILS_FAIL, \r\n    USER_DETAILS_REQUEST, \r\n    USER_DETAILS_SUCCESS, \r\n    USER_LOGIN_FAIL, \r\n    USER_LOGIN_REQUEST, \r\n    USER_LOGIN_SUCCESS, \r\n    USER_LOGOUT,\r\n    USER_REGISTER_FAIL,\r\n    USER_REGISTER_REQUEST, \r\n    USER_REGISTER_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_DETAILS_RESET,\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n} from \"../constants/userConstants\"\r\n\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\r\n\r\n//request for login and getting token для входа\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n// делаем реквест для получения данных //1 - адрес, 2 - тело с параметрами с инпутов, 3 - headers, заголовок\r\n        const {data} = await axios.post('/api/users/login', {email, password}, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получаем обьект с функции userController с backend \r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n        // добавляем пользователя в локальное хранилище\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n} catch (error) {\r\n    dispatch({\r\n        type: USER_LOGIN_FAIL,\r\n        payload: error.response && error.response.data.message ? error.response.data.message \r\n        : error.message\r\n    })\r\n    }\r\n}\r\n\r\n\r\n// Для выхода из профиля\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({\r\n        type: USER_LOGOUT,\r\n    })\r\n    dispatch({\r\n        type: USER_DETAILS_RESET,\r\n    })\r\n    dispatch({\r\n        type: ORDER_LIST_MY_RESET,\r\n    })\r\n    dispatch({\r\n        type: USER_LIST_RESET,\r\n    })\r\n}\r\n\r\n\r\n//для регистрации\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n// делаем реквест для получения данных //1 - адрес, 2 - тело с параметрами с инпутов, 3 - headers, заголовок\r\n        const {data} = await axios.post('/api/users', {name, email, password}, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data,\r\n        })\r\n//чтоюы зарегистроированый пользователь сразу регистрировался\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n        // добавляем пользователя в локальное хранилище\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n} catch (error) {\r\n    dispatch({\r\n        type: USER_REGISTER_FAIL,\r\n        payload: error.response && error.response.data.message ? error.response.data.message \r\n        : error.message\r\n    })\r\n    }\r\n}\r\n\r\n//получить данные профиля пользователя\r\n//для входа в профиль зарегистрированого пользователей; getState потому что мы можем получить userInfo у которого есть токен внутри который нужен\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo}} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                //'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n// делаем реквест для получения данных //1 - адрес, 2 - тело с параметрами с инпутов, 3 - headers, заголовок\r\n        const {data} = await axios.get(`/api/users/${id}`, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data,\r\n        })\r\n} catch (error) {\r\n    dispatch({\r\n        type: USER_DETAILS_FAIL,\r\n        payload: error.response && error.response.data.message ? error.response.data.message \r\n        : error.message\r\n    })\r\n    }\r\n}\r\n\r\n\r\n\r\n//для изменения данных профиля  зарегистрированого пользователя; getState потому что мы можем получить userInfo у которого есть токен внутри который нужен\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n// делаем реквест для изменения данных //1 - адрес, 2 - тело с параметрами с инпутов, 3 - headers, заголовок\r\n        const {data} = await axios.put(`/api/users/profile`, user, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data,\r\n        })\r\n} catch (error) {\r\n    dispatch({\r\n        type: USER_UPDATE_PROFILE_FAIL,\r\n        payload: error.response && error.response.data.message ? error.response.data.message \r\n        : error.message\r\n    })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n\r\n    try {\r\n        dispatch({\r\n            type: USER_LIST_REQUEST\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                //'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n// делаем реквест для изменения данных //1 - адрес, 2 - тело с параметрами с инпутов, 3 - headers, заголовок\r\n        const {data} = await axios.get(`/api/users/`, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: USER_LIST_SUCCESS,\r\n            payload: data,\r\n        })\r\n} catch (error) {\r\n    dispatch({\r\n        type: USER_LIST_FAIL,\r\n        payload: error.response && error.response.data.message ? error.response.data.message \r\n        : error.message\r\n    })\r\n    }\r\n} \r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n\r\n    try {\r\n        dispatch({\r\n            type: USER_DELETE_REQUEST\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                //'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n// делаем реквест для изменения данных //1 - адрес, 2 - тело с параметрами с инпутов, 3 - headers, заголовок\r\n         await axios.delete(`/api/users/${id}`, config)\r\n        // делаем реквест для получения данных \r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: USER_DELETE_SUCCESS, })\r\n} catch (error) {\r\n    dispatch({\r\n        type: USER_DELETE_FAIL,\r\n        payload: error.response && error.response.data.message ? error.response.data.message \r\n        : error.message\r\n    })\r\n    }\r\n} \r\n\r\n\r\n//для изменения данных профиля  зарегистрированого пользователя; getState потому что мы можем получить userInfo у которого есть токен внутри который нужен\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_REQUEST\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n// делаем реквест для изменения данных //1 - адрес, 2 - тело с параметрами с инпутов, 3 - headers, заголовок\r\n        const {data} = await axios.put(`/api/users/${user._id}`, user, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({type: USER_UPDATE_SUCCESS,})\r\n//диспатчим сведения о пользователе, которые выведутся в профиле пользователя, для получения новых данных в профиле при изменении\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data,\r\n        })\r\n} catch (error) {\r\n    dispatch({\r\n        type: USER_UPDATE_FAIL,\r\n        payload: error.response && error.response.data.message ? error.response.data.message \r\n        : error.message\r\n    })\r\n    }\r\n}","import React from 'react'\r\nimport {Route} from  'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\n//то же что Link в react-router-dom только дляф бутстрапа\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Container, Navbar, Nav, NavDropdown } from 'react-bootstrap'\r\nimport SearchBox from './SearchBox'\r\nimport { logout } from '../actions/userActions'\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch()\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    //Данные зарегистрированого пользователя\r\n    const {userInfo} = userLogin\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <Navbar bg=\"dark\" variant='dark' expand=\"lg\" collapseOnSelect>\r\n            <Container>\r\n                <LinkContainer to='/' >\r\n                    <Navbar.Brand >ProShop</Navbar.Brand>\r\n                </LinkContainer>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                   <Route render={({history})=> <SearchBox history={history} />} />\r\n                <Nav className=\"ml-auto\">\r\n                    \r\n                    <LinkContainer to=\"/cart\">\r\n                        <Nav.Link > \r\n                            <i className=\"fas fa-shopping-cart\" ></i> Cart\r\n                        </Nav.Link>\r\n                    </LinkContainer>\r\n\r\n                    { userInfo ? (\r\n                        <NavDropdown title={userInfo.name} id='username' >\r\n                            <LinkContainer to='/profile'>\r\n                                <NavDropdown.Item>\r\n                                    Profile\r\n                                </NavDropdown.Item>\r\n                            </LinkContainer>\r\n                            <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    ) : \r\n                    (<LinkContainer to=\"/login\">\r\n                        <Nav.Link >\r\n                            <i className=\"fas fa-user\" ></i> Sign in\r\n                        </Nav.Link>\r\n                    </LinkContainer>)}\r\n                    \r\n                    {userInfo && userInfo.isAdmin && (\r\n                        <NavDropdown title='Admin' id='adminmenu' >\r\n                        <LinkContainer to='/admin/userlist'>\r\n                            <NavDropdown.Item>Users</NavDropdown.Item>\r\n                        </LinkContainer>\r\n                        <LinkContainer to='/admin/productlist'>\r\n                            <NavDropdown.Item>Products</NavDropdown.Item>\r\n                        </LinkContainer>\r\n                        <LinkContainer to='/admin/ordertlist'>\r\n                            <NavDropdown.Item>Orders</NavDropdown.Item>\r\n                        </LinkContainer>\r\n                    </NavDropdown>\r\n                    )}\r\n                </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n            </Navbar>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <Container>\r\n                <Row>\r\n                    <Col className=\"text-center py-3\">\r\n                        Copyright &copy; ProShop\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\n//Рейтинг продукта в звездах, color - цвет который установлен по дефолту в этом же компоненте\r\nconst Rating = ({ value, text, color }) => {\r\n    return (\r\n        <div className='rating' >\r\n            <span>\r\n                {/* проверка если значение рейтинга больше равно 1 добавляется полная звезда, если половине то половинка, или добавляется пустая звезда */}\r\n                <i style={{color}}\r\n                    className={\r\n                        value >= 1 \r\n                        ? 'fas fa-star' \r\n                        : value >= 0.5 \r\n                        ? 'fas fa-star-half-alt' \r\n                        : 'far fa-star'\r\n                    } >\r\n                </i>\r\n            </span>\r\n            <span>\r\n                <i style={{color}}\r\n                    className={\r\n                        value >= 2 \r\n                        ? 'fas fa-star' \r\n                        : value >= 1.5 \r\n                        ? 'fas fa-star-half-alt' \r\n                        : 'far fa-star'\r\n                    } >\r\n                </i>\r\n            </span>\r\n            <span>\r\n                <i style={{color}}\r\n                    className={\r\n                        value >= 3 \r\n                        ? 'fas fa-star' \r\n                        : value >= 2.5 \r\n                        ? 'fas fa-star-half-alt' \r\n                        : 'far fa-star'\r\n                    } >\r\n                </i>\r\n            </span>\r\n            <span>\r\n                <i style={{color}}\r\n                    className={\r\n                        value >= 4 \r\n                        ? 'fas fa-star' \r\n                        : value >= 3.5 \r\n                        ? 'fas fa-star-half-alt' \r\n                        : 'far fa-star'\r\n                    } >\r\n                </i>\r\n            </span>\r\n            <span>\r\n                <i style={{color}}\r\n                    className={\r\n                        value >= 5 \r\n                        ? 'fas fa-star' \r\n                        : value >= 4.5 \r\n                        ? 'fas fa-star-half-alt' \r\n                        : 'far fa-star'\r\n                    } >\r\n                </i>\r\n            </span>\r\n            {/* Если это существует то покажи его */}\r\n                <span>{text && text }</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Установлен уцвет для звезд как дефолтный\r\nRating.defaultProps = {\r\n    color: '#f8e825'\r\n}\r\n// проверка типов обязательно указаный тип\r\n// Rating.propTypes = {\r\n//     value: PropTypes.number.isRequired,\r\n//     text: PropTypes.string.isRequired,\r\n//     color: PropTypes.string\r\n// }\r\n\r\nexport default Rating\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card } from 'react-bootstrap'\r\nimport Rating from './Rating'\r\n\r\n//каждый продукт отбражающийся на сайте\r\nconst Product = ( {product} ) => { \r\n    return (\r\n      // картинка продукта с сылкой на продукт\r\n       <Card className=\"my-3\" >\r\n          {/* Сылка на сам продукт по айди */}\r\n          <Link to={`/product/${product._id}`}>\r\n             <Card.Img src={product.image} variant='top' />\r\n          </Link>\r\n         {/*  название продукта  в виде сылки на айди  */}\r\n          <Card.Body >\r\n            <Link to={`/product/${product._id}`}>\r\n               <Card.Title as=\"div\">\r\n                  <strong>{product.name}</strong>\r\n               </Card.Title>\r\n            </Link>\r\n{/* Рейтинг продукта с компонентом Rating*/}\r\n            <Card.Text as=\"div\">\r\n               <Rating \r\n                  value={product.rating} \r\n                  text={`${product.numReviews} reviews`}  \r\n               />\r\n            </Card.Text>\r\n{/* Цена продукта */}\r\n            <Card.Text as=\"h3\">\r\n               ${product.price}\r\n            </Card.Text>\r\n          </Card.Body>\r\n       </Card>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Product\r\n","import React from 'react'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <Spinner \r\n            animation=\"border\" \r\n            role=\"status\" \r\n            style={{\r\n                width: '100px', \r\n                height: '100px', \r\n                margin: 'auto', \r\n                display: 'block'\r\n            }}\r\n        >\r\n            <span className=\"sr-only\" >Loading</span>\r\n        </Spinner>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\nimport { Alert } from 'react-bootstrap'\r\n//сообщение при ошибку\r\nconst Message = ({variant, children}) => {\r\n    return (\r\n        <Alert variant={variant} >\r\n            {children}\r\n        </Alert>\r\n    )\r\n}\r\n// дефолтные параметры, если они не переданы\r\nMessage.defaultProps = {\r\n    variant: 'info'\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport { Pagination } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\n\r\nconst Paginate = ({pages, page, isAdmin= false, keyword='' }) => {\r\n\r\n\r\n    return pages > 1 \r\n    && (\r\n        <Pagination>\r\n            {/* преващаем в массив c ключами от 0 до количества страниц -1, и берем ключи */}\r\n            {[...Array(pages).keys()].map(x => (\r\n                //x + 1 - our page number\r\n                <LinkContainer key={x + 1} \r\n                 to={!isAdmin ? keyword ? `/search/${keyword}/page/${x+1}` : `/page/${x+1}`\r\n                : `/admin/productlist/${x+1}`}>\r\n                    <Pagination.Item active={x+1 === page }>{x+1}</Pagination.Item>\r\n                </LinkContainer>\r\n            ))}\r\n        </Pagination>\r\n    )\r\n}\r\n\r\nexport default Paginate\r\n","import React from 'react'\r\nimport {Helmet} from 'react-helmet'\r\n\r\nconst Meta = ({title, description, keywords}) => {\r\n    return (\r\n        <Helmet>\r\n            <title>{title}</title>\r\n            <meta name='description' content={`${description}`} />\r\n            <meta name='keywords' content={`${keywords}`} />\r\n        </Helmet>\r\n    )\r\n}\r\n\r\nMeta.defautProps = {\r\n    title : 'Welcome To Proshop',\r\n    description: 'We sell the best product for the cheap',\r\n    keywords: 'electronics, buy electronics, cheap electronics',\r\n}\r\n\r\nexport default Meta\r\n","import axios from 'axios'\r\nimport  { \r\n    PRODUCT_LIST_REQUEST, \r\n    PRODUCT_LIST_SUCCESS, \r\n    PRODUCT_LIST_FAIL, \r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n    PRODUCT_DELETE_REQUEST,\r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAIL,\r\n    PRODUCT_CREATE_REQUEST,\r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAIL,\r\n    PRODUCT_UPDATE_REQUEST,\r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAIL,\r\n    PRODUCT_CREATE_REVIEW_REQUEST,\r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n    PRODUCT_TOP_FAIL,\r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_REQUEST\r\n} from '../constants/productConstants'\r\n\r\n// для aсинхронного запроса для отображения всех продуктов используем thunk\r\n// dispatch метод для создания действия в redux для изменения reducer принимает в себя обьект, обязательно с типом\r\nexport const listProducts = (keyword = '', pageNumber = '') => async (dispatch) => {\r\n    try {\r\n        //вызывают reducer и возвращает\r\n        dispatch({type: PRODUCT_LIST_REQUEST})\r\n\r\n        //делаем реквест ?keyword - query string, & - если больше одной query string\r\n        const { data } = await axios.get(`/api/products?keyword=${keyword}&pageNumber=${pageNumber}`)\r\n\r\n        //вызываем reducer успешного реквеста передаем тип и данные\r\n        dispatch({\r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        //если реквест не удался\r\n        // хотим отобраить ошибку так как она отобажается на backend, проверяем если то и то правда, то возвращаем 1, а если нет, то 2\r\n        dispatch({\r\n            type: PRODUCT_LIST_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message \r\n            : error.message\r\n        })\r\n        console.log(error.response); \r\n    }\r\n}\r\n\r\n// для прдукта отдельно\r\nexport const listProductsDetails = (id) => async (dispatch) => {\r\n    try {\r\n        //вызывают reducer и возвращает\r\n        dispatch({type: PRODUCT_DETAILS_REQUEST})\r\n\r\n        //делаем реквест\r\n        const {data} = await axios.get(`/api/products/${id}`)\r\n\r\n        //вызываем reducer успешного реквеста передаем тип и данные\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        //если реквест не удался\r\n        // хотим отобразить ошибку так как она отображается на backend, проверяем если то и то правда, то возвращаем 1, а если нет, то 2\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message \r\n            : error.message\r\n        })\r\n        //console.log(error.response); \r\n    }\r\n}\r\n\r\n\r\n//для удаления продукта из странички по айди\r\nexport const deleteProduct = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_REQUEST,\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n        await axios.delete(`/api/products/${id}`, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: PRODUCT_DELETE_SUCCESS,\r\n        })\r\n    } catch (error) {\r\n            dispatch({\r\n                type: PRODUCT_DELETE_FAIL,\r\n                payload: error.response && error.response.data.message ? error.response.data.message \r\n                : error.message\r\n            })\r\n        }\r\n} \r\n\r\n\r\n\r\n\r\n//для изменения данных продукта из странички по айди\r\nexport const createProduct = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REQUEST,\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n        const {data} = await axios.post(`/api/products`, {}, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: PRODUCT_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n            dispatch({\r\n                type: PRODUCT_CREATE_FAIL,\r\n                payload: error.response && error.response.data.message ? error.response.data.message \r\n                : error.message\r\n            })\r\n        }\r\n} \r\n\r\n//для добавления отзыва о продукте из странички по айди\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_REQUEST,\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                'Content-Type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n        const {data} = await axios.put(`/api/products/${product._id}`, product, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: PRODUCT_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n        dispatch({type: PRODUCT_DETAILS_SUCCESS, payload: data,})\r\n    } catch (error) {\r\n            dispatch({\r\n                type: PRODUCT_UPDATE_FAIL,\r\n                payload: error.response && error.response.data.message ? error.response.data.message \r\n                : error.message\r\n            })\r\n        }\r\n} \r\n\r\n\r\n//для добавления отзыва о продукте из странички по айди\r\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_REQUEST,\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                'Content-Type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n        await axios.post(`/api/products/${productId}/reviews`, review, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\r\n        })\r\n    } catch (error) {\r\n            dispatch({\r\n                type: PRODUCT_CREATE_REVIEW_FAIL,\r\n                payload: error.response && error.response.data.message ? error.response.data.message \r\n                : error.message\r\n            })\r\n        }\r\n} \r\n\r\n\r\nexport const listTopProducts = () => async (dispatch) => {\r\n    try {\r\n        //вызывают reducer и возвращает\r\n        dispatch({type: PRODUCT_TOP_REQUEST})\r\n\r\n        //делаем реквест \r\n        const { data } = await axios.get(`/api/products/top`)\r\n        \r\n\r\n        //вызываем reducer успешного реквеста передаем тип и данные\r\n        dispatch({\r\n            type: PRODUCT_TOP_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        //если реквест не удался\r\n        // хотим отобраить ошибку так как она отобажается на backend, проверяем если то и то правда, то возвращаем 1, а если нет, то 2\r\n        dispatch({\r\n            type: PRODUCT_TOP_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message \r\n            : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useEffect } from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Carousel, Image } from 'react-bootstrap'\r\nimport Loader from './Loader'\r\nimport Message from './Message'\r\nimport { listTopProducts } from '../actions/productActions'\r\n\r\n\r\nconst ProductCarousel = () => {\r\n\r\n    const  dispatch = useDispatch()\r\n\r\n    const productTopRated = useSelector(state => state.productTopRated)\r\n    const {loading, products, error} = productTopRated\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(listTopProducts())\r\n    }, [dispatch])\r\n\r\n    return loading ?( <Loader />) \r\n    : error ? (<Message variant=\"danger\">{error}</Message>)\r\n    : (\r\n        <Carousel pause='hover' className='bg-dark' >\r\n        { products.map( product => (\r\n           <Carousel.Item key={product._id}>\r\n               <Link to={`/product/${product._id}`}></Link>\r\n               <Image src={product.image} alt={product.name} fluid />\r\n               <Carousel.Caption className=\"carousel-caption\">\r\n                   <h2>{product.name} (${product.price})</h2>\r\n               </Carousel.Caption>\r\n           </Carousel.Item>\r\n        )) \r\n        }\r\n        </Carousel>\r\n    )\r\n}\r\n\r\n\r\nexport default ProductCarousel\r\n","import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport Product from '../components/Product'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport Meta from '../components/Meta'\r\nimport { listProducts } from '../actions/productActions'\r\nimport ProductCarousel from '../components/ProductCarousel'\r\n\r\n// 1 экран сайта с продуктами\r\nconst HomeScreen = ({match}) => {\r\n    const keyword = match.params.keyword\r\n\r\n\r\n    const pageNumber = match.params.pageNumber || 1\r\n\r\n    // хук для сооденения компонента с actions\r\n    const dispatch = useDispatch()\r\n \r\n    // название совпадает с названием reducer в store combineReducers\r\n    //2получаем стейт с редюсера через поле в combineReducers в файле store\r\n    const productList = useSelector( (state) => state.productList )\r\n\r\n    // деструктуризируем данные по название полей в reducer\r\n    const { loading, error, products, pages, page } = productList\r\n\r\n    //console.log(`Error: ${error}`);\r\n    //console.log(`LOAding: ${loading}`);\r\n    //console.log(`Products: ${products}`);\r\n\r\n    //Срабатывает при загрузке компонента\r\n    useEffect(() =>{\r\n        //получает данные из сервера\r\n        //1выполняем функцию !actions, которая в свою очередь передает полученные данные в reducer как обьект продуктов\r\n        dispatch(listProducts(keyword, pageNumber))\r\n    },[dispatch, keyword, pageNumber])\r\n\r\n    return (\r\n        <>\r\n        {/* для отображения заголовка окна */}\r\n        <Meta />\r\n     \r\n        {/* проверка чтоб не показывать карусель при поиске про продукте */}\r\n        {!keyword ? <ProductCarousel />  : (<Link to='/' className='btn btn-light my-3' >Go Back</Link>) }\r\n            <h1>Latest Products</h1>\r\n            {/* проверка на загрузку */}\r\n            {loading ? (<Loader/>) : error ? (<Message variant=\"danger\">{error}</Message>) \r\n            :    (\r\n                <>\r\n                <Row>\r\n                    { products.map(product => (\r\n                        <Col key={product._id} sm=\"12\" md={6} lg={4} xl={3}> \r\n                            <Product product={product} />\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n                <Paginate pages={pages} page={page} keyword={keyword ? keyword : ''} />\r\n                </>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Запрос данных, до перехода на редакс\r\n//const [products, setProducts] = useState([])\r\n\r\n////Срабатывает при загрузке компонента\r\n//useEffect(() =>{\r\n//    //делаем запрос, получаем промис, командой then делаем из него обьект\r\n////   axios.get('/api/products').then(response)\r\n//    const fetchProducts = async() => {\r\n//        const {data} = await axios.get('/api/products')\r\n\r\n//        //получакм обьект с ключем data изменяем стейт с помощью функции \r\n//        setProducts(data)\r\n//    }\r\n\r\n//    fetchProducts()\r\n\r\n//}, [])\r\n   /*<Helmet> \r\n            <title>Welcome to Proshop | Home </title>\r\n            <meta name='description' content='We sell the best product for the cheap' />\r\n            <meta name='keywords' content='electronics, buy electronics, cheap electronics' />\r\n\r\n        </Helmet>*/","import React, {useState ,useEffect } from 'react'\r\nimport  { Link } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Row, Col, Image, ListGroup, Card, Button, Form } from 'react-bootstrap'\r\nimport Rating from '../components/Rating'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport Meta from '../components/Meta'\r\nimport {listProductsDetails, createProductReview} from '../actions/productActions'\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants'\r\n\r\n\r\n\r\n// экран где при клике на конкретный продукт будет отображаться страница с конкретно выбранный продукт\r\n//  match.params.id - для получения конкретного айди продукта при клике\r\nconst ProductScreen = ({history, match}) => {\r\n// для показа количества едениц товара\r\n    const [qty, setQty] = useState(1)\r\n    const [comment, setComment] = useState('')\r\n    const [rating, setRating] = useState(0)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const {product, loading, error} = productDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\r\n    const { error: errorProductReview, success: successProductReview} = productReviewCreate\r\n\r\n    useEffect(() => {\r\n        if(successProductReview) {\r\n            alert('Review Submitted')\r\n            setRating(0)\r\n            setComment('')\r\n            dispatch({type: PRODUCT_CREATE_REVIEW_RESET})\r\n        }\r\n        dispatch(listProductsDetails(match.params.id))\r\n    }, [successProductReview, dispatch, match])\r\n\r\n//ФУНКЦИЯ ДОБАВЛЕНИЯ В КОРЗИНУ \r\n    const addToCartHandler = () => {\r\n        //? парметры которые пушатся в истории переправляются переадресация \r\n        history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n    }\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(createProductReview(match.params.id, {rating, comment}))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to='/' className=\"btn btn-light my-3\">\r\n                Go back\r\n            </Link>\r\n            {/* отрисовывает компонент если прошла загрузка и не было ошибок */}\r\n            { loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> \r\n            : (\r\n             <> \r\n            <Meta title={`${product.name}`} />\r\n            <Row>\r\n                <Col md={6} >\r\n                    {/* fluid чтоб картинка не выходила за свои границы конейнера */}\r\n                    <Image src={product.image} alt={product.name}  fluid/>\r\n                </Col>\r\n\r\n                <Col md={3}>\r\n                    {/* variant='flash' убирает пробелы или граница */}\r\n                    <ListGroup variant='flu sh'>\r\n\r\n                        <ListGroup.Item>\r\n                            <h3>{product.name}</h3>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <Rating value={product.rating} text={`${product.numReviews} reviews`} />\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            Price: ${product.price}\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            Description: {product.description}\r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n                </Col>\r\n\r\n                <Col md={3}>\r\n                    <Card>\r\n\r\n                        <ListGroup.Item variant=\"flush\">\r\n                            <Row>\r\n                                <Col>Price:</Col>\r\n                                <Col> <strong>${product.price} </strong> </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item variant=\"flush\">\r\n                            <Row>\r\n                                <Col>Status:</Col>\r\n                                <Col>{product.countInStock > 0 ? \"In Stock\" : \"Out of Stock\"}</Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                        {/* && - then  показывает если продуктов больше 0*/}\r\n                        {product.countInStock > 0 && (\r\n                            <ListGroup.Item >\r\n                                <Row>\r\n                                    <Col>Qty</Col>\r\n                                    <Col>\r\n                                        <Form.Control \r\n                                        style={{padding: '5px 15px'}}\r\n                                        as=\"select\" \r\n                                        value={qty} \r\n                                        onChange={(e) => setQty(e.target.value)} >\r\n                                            {/* для отображения количества */}\r\n                                            {\r\n                                                [...Array(product.countInStock).keys()].map((x) => (\r\n                                                    <option key={x + 1} value={ x + 1}   >\r\n                                                        { x + 1 }\r\n                                                    </option>\r\n                                                ))\r\n                                            }\r\n                                        </Form.Control>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                        ) }\r\n\r\n{/* Button disabled когда нет продуктов в магазине */}\r\n                        <ListGroup.Item>\r\n                            <Button \r\n                            onClick={addToCartHandler}\r\n                            className=\"btn-block\" \r\n                            type=\"button\" \r\n                            disabled={product.countInStock === 0 }>\r\n                                Add to Cart\r\n                            </Button>\r\n                        </ListGroup.Item>\r\n\r\n                    </Card>\r\n                </Col>\r\n                      \r\n            </Row>\r\n\r\n            <Row>\r\n                <Col md={6}>\r\n                    <h2>Reviews</h2>\r\n                    {product.reviews.lenght === 0 && <Message>No Reviews</Message>}\r\n                    <ListGroup variant='flush'>\r\n                        {product.reviews.map(review => (\r\n                            <ListGroup.Item key={review._id}>\r\n                                <strong>\r\n                                    {review.name}\r\n                                </strong>\r\n                                <Rating value={review.rating} />\r\n                                <p>{review.createdAt.substring(0,10)}</p>\r\n                                <p>{review.comment}</p>\r\n                            </ListGroup.Item>\r\n                        ))}\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Write a Customer Review</h2>\r\n                            {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\r\n                            {userInfo ? (\r\n                               <Form onSubmit={submitHandler}>\r\n                                   <Form.Group controlId='rating'>\r\n                                        <Form.Label>Rating</Form.Label>\r\n                                        <Form.Control as='select' \r\n                                        value={rating} \r\n                                        onChange={e=> setRating(e.target.value)}>\r\n                                            <option value=''>Select...</option>\r\n                                            <option value='1'>1 - Poor</option>\r\n                                            <option value='2'>2 - Fair</option>\r\n                                            <option value='3'>3 - Good</option>\r\n                                            <option value='4'>4 - Very Good</option>\r\n                                            <option value='5'>5 - Excellent</option>\r\n                                        </Form.Control>\r\n                                   </Form.Group>\r\n                                   <Form.Group controlId='comment'>\r\n                                       <Form.Label>Comment</Form.Label>\r\n                                       <Form.Control as='textarea' \r\n                                       value={comment} \r\n                                       row='3' \r\n                                       onChange={e => setComment(e.target.value)}></Form.Control>\r\n                                   </Form.Group>\r\n\r\n                                   <Button type='submit' variant='primary'>Submit</Button>\r\n                               </Form>\r\n                               \r\n                            ) : <Message>Please <Link to='/login'>sign in</Link> to write a review</Message>}\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Col>\r\n            </Row>\r\n\r\n            </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProductScreen\r\n\r\n\r\n\r\n\r\n    //// находит и возвращает, если срабатывает условие\r\n    ////const product = products.find(p => p._id === match.params.id)\r\n    //const [product, setProduct] = useState({})\r\n\r\n    //useEffect(() => {\r\n    //    //делаем запрос, получаем промис, командой then делаем из него обьект\r\n    //    const fetchProduct = async() => {\r\n    //        const {data} = await axios.get(`/api/products/${match.params.id}`)\r\n\r\n    //        //получакм обьект с ключем data изменяем стейт с помощью функции \r\n    //        setProduct(data)\r\n    //    }\r\n\r\n    //    fetchProduct()\r\n    //}, [match])","// когда мы добавляем продуты в корзину, мы хотим делать запрос на API product\r\n// для ID чтобы получить поля для получения данных о конкретном продукте для добавления в корзину\r\nimport axios from 'axios'\r\nimport {CART_REMOVE_ITEM, \r\n    CART_ADD_ITEM, \r\n    CART_SAVE_SHIPPING_ADDRESS,\r\n    CART_SAVE_PAYMENT_METHOD\r\n} from '../constants/cartConstants'\r\n\r\n// с помощью dispatch можно ложить и получать state и это позволяет получить весь стейт getState для получения любого из state\r\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\r\n\r\n    const {data} = await axios.get(`/api/products/${id}`)\r\n\r\n    dispatch({ \r\n        type: CART_ADD_ITEM,\r\n        payload: {\r\n            //айди\r\n            product: data._id,\r\n            name: data.name,\r\n            image: data.image,\r\n            price: data.price,\r\n            countInStock: data.countInStock,\r\n            qty\r\n        } \r\n    })\r\n\r\n    //console.log(localStorage);\r\n\r\n    // записываем в локальное хранилище\r\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems)) \r\n}\r\n\r\n\r\nexport const removeFromCart = (id) => async (dispatch, getState) => {\r\n    dispatch({\r\n        type: CART_REMOVE_ITEM,\r\n        payload: id\r\n    })\r\n\r\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n}\r\n\r\n// сохраняем адресс отправки\r\nexport const saveShippingAddress = (data) => async (dispatch) => {\r\n    dispatch({\r\n        type: CART_SAVE_SHIPPING_ADDRESS,\r\n        payload: data\r\n    })\r\n// записываем в localStorage наши данные под именнем shippingAddress\r\n    localStorage.setItem('shippingAddress', JSON.stringify(data))\r\n}\r\n\r\n\r\n// сохраняем метод оплаты \r\nexport const savePaymentMethod = (data) => async (dispatch) => {\r\n    dispatch({\r\n        type: CART_SAVE_PAYMENT_METHOD,\r\n        payload: data\r\n    })\r\n// записываем в localStorage наши данные под именнем shippingAddress\r\n    localStorage.setItem('paymentMethod', JSON.stringify(data))\r\n}","import React, {useEffect} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport { addToCart, removeFromCart } from '../actions/cartActions'\r\n\r\n//КОРЗИНА продуктов, вызывается в App.js добавления идут с ProductScreen\r\n//location для получения qty - количекства продуктов и для получения queryString, history для редиректа\r\nconst CartScreen = ({match, location, history}) => {\r\n    const productId = match.params.id\r\n//   разбивает строку на массив из 2 значений и берем под индексом один\r\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n\r\n    const dispatch = useDispatch()\r\n// со всего стейта получаем поле cart\r\n    const cart = useSelector((state) => state.cart)\r\n    const { cartItems } = cart\r\n    //console.log(cartItems);\r\n\r\n    useEffect(() => {\r\n\r\n        if(productId) {\r\n            dispatch(addToCart(productId, qty))\r\n        }\r\n    }, [dispatch, productId, qty])\r\n\r\n//удалить из корзины\r\n    const removeFromCartHandler = (id) => {\r\n       dispatch(removeFromCart(id))\r\n    }\r\n//оформить заказ\r\n    const checkoutHandler = () => {\r\n        //если человек не зарегистрирован его перекинет на регистрацию, если он зарeгистрировался, перекиненет на доставку\r\n        history.push('/login?redirect=shipping')\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col md = {8} >\r\n                <h1>Shoping Cart </h1>\r\n                {/* проверяем есть ли что-то в нашей корзине */}\r\n                {cartItems.length === 0 \r\n                ? <Message>Your cart is empty <Link to={'/'}>Go back</Link> </Message> \r\n                : (\r\n                    <ListGroup variant='flush'>\r\n                        {cartItems.map((item) => (\r\n                            <ListGroup.Item key={item.product}>\r\n                                 <Row>\r\n                                    <Col md={2}> \r\n                                    {/*rounded закругленые углы  */}\r\n                                        <Image src={item.image} alt={item.name} fluid rounded/>\r\n                                    </Col>\r\n                                    <Col md={3} >\r\n                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                    </Col>\r\n                                    <Col md={2}>\r\n                                        ${item.price}\r\n                                    </Col>\r\n                                    <Col md={2} >\r\n                                        <Form.Control \r\n                                            style={{padding: '5px 15px'}}\r\n                                            as=\"select\" \r\n                                            value={item.qty} \r\n                                            //если изменить количество то оно измениться в редусере и в стейте соответственно\r\n                                            onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}\r\n                                            >\r\n                                                {/* для отображения количества */}\r\n                                                {\r\n                                                    [...Array(item.countInStock).keys()].map((x) => (\r\n                                                        <option key={x + 1} value={ x + 1}   >\r\n                                                            { x + 1 }\r\n                                                        </option>\r\n                                                    ))\r\n                                                }\r\n                                        </Form.Control>\r\n                                    </Col>\r\n                                    <Col md={2} >\r\n                                        {/* Удаление из корзины */}\r\n                                        <Button type=\"button\" variant='light' onClick={() => removeFromCartHandler(item.product)}>\r\n                                            <i className='fas fa-trash'></i>\r\n                                        </Button>\r\n                                    </Col>\r\n                                 </Row>\r\n                            </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                )}\r\n            </Col>\r\n            <Col md={4} >\r\n                <Card>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            {/* принимает акамулятор и текущий aйтем */}\r\n                            <h2>Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)}) items </h2>\r\n                            {/* сумарная стоимость */}\r\n                            ${cartItems\r\n                            .reduce((acc, item) => acc + item.qty * item.price, 0)\r\n                            .toFixed(2)}\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <Button \r\n                            type='button' \r\n                            className=\"btn-block\" \r\n                            disabled={cartItems.length === 0}\r\n                            onClick={checkoutHandler}>\r\n                                Proceed to checkout\r\n                            </Button>\r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default CartScreen\r\n","import React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\nconst FormContainer = ({children}) => {\r\n    return (\r\n        <Container>\r\n            <Row className='justify-content-md-center'>\r\n                <Col xs={12} md={6} >\r\n                    { children }\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default FormContainer\r\n","import React, {useState, useEffect,} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer' \r\nimport { login } from '../actions/userActions'\r\n// форма для входа уже зарегистрированых пользователей пользователя\r\n// useState - поля формы будут частью State\r\nconst LoginScreen = ({ location, history }) => {\r\n    //state для полей email password\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo, loading, error} = userLogin\r\n//сылка на url query string\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    //хотим редиректить если пользователь уе зарегистрировался\r\n    useEffect(() => {\r\n        if(userInfo) {\r\n            history.push(redirect)\r\n        }\r\n        //зависимости для тогоо чтоб обновлялся при изменении одной из них\r\n    }, [history, userInfo, redirect])\r\n\r\n    //console.log(redirect);\r\n\r\n    const submitHandler = (e) => {\r\n        // не перезагружаеться\r\n        e.preventDefault()\r\n        //DISPATCH LOGIN\r\n        dispatch(login(email, password))\r\n    }\r\n\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign In</h1>\r\n            {/* then lets show */}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler} >\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Adress</Form.Label>\r\n                    <Form.Control\r\n                     type='email'\r\n                     placeholder='Enter email'\r\n                     value={email}\r\n                     onChange={(e) => setEmail(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                     type='password'\r\n                     placeholder='Enter password'\r\n                     value={password}\r\n                     onChange={(e) => setPassword(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Sign In\r\n                </Button>\r\n            </Form>\r\n\r\n{/* Редирект на регистрацию */}\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    New Customer? {' '}\r\n                    <Link to={redirect ?  `/register?redirect=${redirect}`: '/register'}>\r\n                        Register\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","import React, {useState, useEffect,} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer' \r\nimport { register } from '../actions/userActions'\r\n// форма для входа уже зарегистрированых пользователей пользователя\r\n// useState - поля формы будут частью State\r\nconst RegisterScreen = ({ location, history }) => {\r\n    //state для полей email password\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const {userInfo, loading, error} = userRegister\r\n//сылка на url query string\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    //хотим редиректить если пользователь уе зарегистрировался\r\n    useEffect(() => {\r\n        if(userInfo) {\r\n            history.push(redirect)\r\n        }\r\n        //зависимости для тогоо чтоб обновлялся при изменении одной из них\r\n    }, [history, userInfo, redirect])\r\n\r\n    //console.log(redirect);\r\n\r\n    const submitHandler = (e) => {\r\n        // не перезагружаеться\r\n        e.preventDefault()\r\n        //DISPATCH Register\r\n        if(password !== confirmPassword) {\r\n            setMessage('Password do not match ')\r\n        } else {\r\n            dispatch(register(name, email, password))\r\n        }\r\n     \r\n    }\r\n\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign UP</h1>\r\n            {/* then lets show */}\r\n            {message && <Message variant='danger'>{message}</Message>} \r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler} >\r\n\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name </Form.Label>\r\n                    <Form.Control\r\n                     type='name'\r\n                     placeholder='Enter name'\r\n                     value={name}\r\n                     onChange={(e) => setName(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Adress</Form.Label>\r\n                    <Form.Control\r\n                     type='email'\r\n                     placeholder='Enter email'\r\n                     value={email}\r\n                     onChange={(e) => setEmail(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                     type='password'\r\n                     placeholder='Enter password'\r\n                     value={password}\r\n                     onChange={(e) => setPassword(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n\r\n                <Form.Group controlId='confirmPassword'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                     type='password'\r\n                     placeholder='Confirm password'\r\n                     value={confirmPassword}\r\n                     onChange={(e) => setConfirmPassword(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Register\r\n                </Button>\r\n            </Form>\r\n\r\n{/* Редирект на регистрацию */}\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Have an Account ? \r\n                    {' '} <Link to={redirect ?  `/login?redirect=${redirect}`: '/login'}> \r\n                        Login\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","import React, {useState, useEffect,} from 'react'\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { listMyOrders } from '../actions/orderActions'\r\n\r\n//Профиль пользователя \r\n// useState - поля формы будут частью State\r\nconst ProfileScreen = ({ history }) => {\r\n    //state для полей email password\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const {user, loading, error} = userDetails\r\n//для проверки зарегистрирован ли пользователь\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const {success} = userUpdateProfile\r\n\r\n    const orderListMy = useSelector(state => state.orderListMy)\r\n    const {orders, loading: loadingOrders, error: errorOrders} = orderListMy\r\n\r\n//сылка на url query string\r\n    //const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    //хотим редиректить если пользователь не зарегистрировался\r\n    useEffect(() => {\r\n        if(!userInfo) {\r\n            //редирект на страницу регистрации\r\n            history.push('/login')\r\n        } else  {\r\n            //проверяем пользователя который пришел из стейта, если нет \r\n            if(!user.name) {\r\n                //если пользователь не зарегистрирован перекидуем на страницу профиля\r\n                dispatch(getUserDetails('profile'))\r\n                dispatch(listMyOrders())\r\n            } else {\r\n                // чтобы поля были заполнены при загрузке профиля\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n        //зависимости для тогоо чтоб обновлялся при изменении одной из них\r\n    }, [dispatch, history, userInfo, user])\r\n\r\n    //console.log(redirect);\r\n\r\n    const submitHandler = (e) => {\r\n        // не перезагружаеться\r\n        e.preventDefault()\r\n        //DISPATCH Register\r\n        if(password !== confirmPassword) {\r\n            setMessage('Password do not match ')\r\n        } else {\r\n            //передаем езменившееся данные в аction\r\n            dispatch(updateUserProfile({id: user._id, name, email, password}))\r\n        }\r\n     \r\n    }\r\n\r\n\r\n    return <Row>\r\n        <Col md={3}>\r\n            <h2>User Profile</h2>\r\n                {/* then lets show */}\r\n                {message && <Message variant='danger'>{message}</Message>} \r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {success && <Message variant='success'>Profile Update</Message>}\r\n                {loading && <Loader />}\r\n                <Form onSubmit={submitHandler} >\r\n\r\n                    <Form.Group controlId='name'>\r\n                        <Form.Label>Name </Form.Label>\r\n                        <Form.Control\r\n                        type='name'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='email'>\r\n                        <Form.Label>Email Adress</Form.Label>\r\n                        <Form.Control\r\n                        type='email'\r\n                        placeholder='Enter email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='password'>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n                        type='password'\r\n                        placeholder='Enter password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId='confirmPassword'>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n                        type='password'\r\n                        placeholder='Confirm password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Button type='submit' variant='primary'>\r\n                        Update\r\n                    </Button>\r\n                </Form>\r\n        </Col>\r\n\r\n        <Col md={9}>\r\n            <h2>My Orders</h2>\r\n\r\n            {loadingOrders ? <Loader /> \r\n            : errorOrders ? <Message variant='dangers'>{errorOrders}</Message>\r\n            : (\r\n                <Table striped bordered hover responsive className='table-sm'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>DATE</th>\r\n                            <th>TOTAL </th>\r\n                            <th>PAID</th>\r\n                            <th>DELIVERED</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {orders.map(order => (\r\n                            <tr key={order._id}>\r\n                                <td>{order._id} </td>\r\n                                <td>{order.createdAt.substring(0,10)} </td>\r\n                                <td>{order.totalPrice} </td>\r\n                                <td>{order.isPaid ? order.paidAt.substring(0,10) \r\n                                : (<i className='fas fa-times' style={{color:'red'}}></i>)} </td>\r\n                                 <td>{order.isDelivered ? order.deliveredAt.substring(0,10) \r\n                                : (<i className='fas fa-times' style={{color:'red'}}></i>)} </td>\r\n                                <td>\r\n                                    <LinkContainer to={`/order/${order._id}`}>\r\n                                        <Button className='btn-sm' variant='light'>Details</Button>\r\n                                    </LinkContainer>\r\n                                </td>\r\n                            </tr>\r\n\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            )\r\n            }\r\n        </Col>\r\n    </Row>\r\n}\r\n\r\n\r\nexport default ProfileScreen\r\n","import axios from \"axios\";\r\nimport { \r\n    ORDER_CREATE_REQUEST, \r\n    ORDER_CREATE_SUCCESS, \r\n    ORDER_CREATE_FAIL, \r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n    ORDER_DELIVER_REQUEST,\r\n    ORDER_DELIVER_SUCCESS,\r\n    ORDER_DELIVER_FAIL} from \"../constants/orderConstants\";\r\n\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST,\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n// делаем реквест для добавления данных //1 - адрес, 2 - тело с параметрами с инпутов, 3 - headers, заголовок\r\n        const {data} = await axios.post(`/api/orders`, order, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n            dispatch({\r\n                type: ORDER_CREATE_FAIL,\r\n                payload: error.response && error.response.data.message ? error.response.data.message \r\n                : error.message\r\n            })\r\n        }\r\n} \r\n\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST,\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n// делаем реквест для добавления данных //1 - адрес, 2 - тело с параметрами с инпутов, 3 - headers, заголовок\r\n        const {data} = await axios.get(`/api/orders/${id}`, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n            dispatch({\r\n                type: ORDER_DETAILS_FAIL,\r\n                payload: error.response && error.response.data.message ? error.response.data.message \r\n                : error.message\r\n            })\r\n        }\r\n} \r\n\r\n\r\n//для добавления того что товар оплачен\r\nexport const payOrder = (orderId, paymentResult) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST,\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n// делаем реквест для добавления данных //1 - адрес, 2 - тело с параметрами с инпутов, 3 - headers, заголовок\r\n        const {data} = await axios.put(`/api/orders/${orderId}/pay`,paymentResult, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n            dispatch({\r\n                type: ORDER_PAY_FAIL,\r\n                payload: error.response && error.response.data.message ? error.response.data.message \r\n                : error.message\r\n            })\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\n//для добавления того что товар оплачен\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_REQUEST,\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n        const {data} = await axios.get(`/api/orders/myorders`, config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: ORDER_LIST_MY_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n            dispatch({\r\n                type: ORDER_LIST_MY_FAIL,\r\n                payload: error.response && error.response.data.message ? error.response.data.message \r\n                : error.message\r\n            })\r\n        }\r\n} \r\n\r\n\r\nexport const listOrders = () => async (dispatch, getState) => {\r\n\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_REQUEST,\r\n        })\r\n\r\n        const {userLogin: {userInfo},} = getState()\r\n\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        const {data} = await axios.get('/api/orders', config)\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message \r\n            : error.message\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n//для добавления того что товар оплачен\r\nexport const deliverOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DELIVER_REQUEST,\r\n        })\r\n\r\n//двойная деструктуризация, получаем userLogin из getState а потом userInfo из userLogin, доступ к авторизованым пользователям\r\n        const {userLogin : {userInfo},} = getState()\r\n\r\n        //обьект который мы передаем при запросе как headers\r\n        const config = {\r\n            // место где мы отправим token для защищенных маршрутов адреса\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n// вернет обьект с полем дата, по этому используем деструктуризацию\r\n// делаем реквест для добавления данных //1 - адрес, 2 - тело с параметрами с инпутов, 3 - headers, заголовок\r\n        const {data} = await axios.put(`/api/orders/${order._id}/deliver`, {},  config)\r\n        // делаем реквест для получения данных\r\n\r\n        //диспатчим полученные данныйе в редусер в data получакм обьект с функции userController с backend \r\n        dispatch({\r\n            type: ORDER_DELIVER_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n            dispatch({\r\n                type: ORDER_DELIVER_FAIL,\r\n                payload: error.response && error.response.data.message ? error.response.data.message \r\n                : error.message\r\n            })\r\n        }\r\n}","import React from 'react'\r\nimport {Nav } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\n\r\n// проверки для 4 оазных экранов\r\nconst CheckoutSteps = ({step1, step2, step3, step4}) => {\r\n    return (\r\n        <Nav className=\"justify-cintent-center mb-4\">\r\n            <Nav.Item>\r\n                {step1 ? (\r\n                    <LinkContainer to='/login'>\r\n                        <Nav.Link>Sign In</Nav.Link>\r\n                    </LinkContainer>\r\n                ): <Nav.Link disabled>Sign In</Nav.Link>}\r\n            </Nav.Item>\r\n\r\n            <Nav.Item>\r\n                {step2 ? (\r\n                    <LinkContainer to='/shipping'>\r\n                        <Nav.Link>Shipping</Nav.Link>\r\n                    </LinkContainer>\r\n                ): <Nav.Link disabled>Shipping</Nav.Link>}\r\n            </Nav.Item>\r\n\r\n            <Nav.Item>\r\n                {step3 ? (\r\n                    <LinkContainer to='/payment'>\r\n                        <Nav.Link>Payment</Nav.Link>\r\n                    </LinkContainer>\r\n                ): <Nav.Link disabled>Payment</Nav.Link>}\r\n            </Nav.Item>\r\n\r\n            <Nav.Item>\r\n                {step4 ? (\r\n                    <LinkContainer to='/placeorder'>\r\n                        <Nav.Link>Place Order</Nav.Link>\r\n                    </LinkContainer>\r\n                ): <Nav.Link disabled>Place Order</Nav.Link>}\r\n            </Nav.Item>\r\n        </Nav>\r\n    )\r\n}\r\n\r\nexport default CheckoutSteps\r\n","import React, { useState } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer' \r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\n\r\n\r\n//экран для заполнения формы отправки history -для редиректа а экран оплты\r\nconst ShippingScreen = ({history}) => {\r\n// получаем из стейта cartReducer  обьект shippingAddress\r\n    const cart =  useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    const [address, setAddress] = useState(shippingAddress.address)\r\n    const [city, setCity] = useState(shippingAddress.city)\r\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n    const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        //будем диспачить  action сохранения адресса отправки\r\n        dispatch(saveShippingAddress({address, city, postalCode, country}))\r\n        // перекидываем на другую страницу для оплаты  \r\n        history.push('/payment')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 />\r\n            <h1>Shipping</h1>\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='address'>\r\n                        <Form.Label> Address </Form.Label>\r\n                        <Form.Control\r\n                        type='text'\r\n                        placeholder='Enter address'\r\n                        value={address}\r\n                        required\r\n                        onChange={(e) => setAddress(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='city'>\r\n                        <Form.Label> City </Form.Label>\r\n                        <Form.Control\r\n                        type='text'\r\n                        placeholder='Enter city'\r\n                        value={city}\r\n                        required\r\n                        onChange={(e) => setCity(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n                    \r\n                <Form.Group controlId='postalCode'>\r\n                        <Form.Label> Postal сode </Form.Label>\r\n                        <Form.Control\r\n                        type='text'\r\n                        placeholder='Enter postal code'\r\n                        value={postalCode}\r\n                        required\r\n                        onChange={(e) => setPostalCode(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='country'>\r\n                        <Form.Label> Country </Form.Label>\r\n                        <Form.Control\r\n                        type='text'\r\n                        placeholder='Enter сountry'\r\n                        value={country}\r\n                        required\r\n                        onChange={(e) => setCountry(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n\r\n                <Button type=\"submit\" variant='primary' >\r\n                    Continue\r\n                </Button>\r\n\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default ShippingScreen\r\n","//Экран выбора метода оплаты\r\nimport React, { useState } from 'react'\r\nimport { Form, Button, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer' \r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\n\r\n\r\n//экран для заполнения формы отправки history -для редиректа а экран оплты\r\nconst PaymentScreen = ({history}) => {\r\n// получаем из стейта cartReducer  обьект shippingAddress\r\n    const cart =  useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    if(!shippingAddress) {\r\n        history.push('/shipping')\r\n    }\r\n\r\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        //будем диспачить  action сохранения адресса отправки\r\n        dispatch(savePaymentMethod(paymentMethod))\r\n        // перекидываем на другую страницу для оплаты  \r\n        history.push('/placeorder')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 step3 />\r\n            <h1>Payment MEthod</h1>\r\n            <Form onSubmit={submitHandler} >\r\n\r\n                <Form.Group>\r\n                    <Form.Label as='legend' >Select Method</Form.Label>\r\n\r\n                <Col>\r\n                    <Form.Check \r\n                    type=\"radio\" \r\n                    label=\"PayPal or Credit Card\" \r\n                    id=\"PayPal\" \r\n                    name='paymentMethod'\r\n                    value='PayPal'\r\n                    checked\r\n                    onChange={(e) => setPaymentMethod(e.target.value)}\r\n                    ></Form.Check>\r\n\r\n                    {/*<Form.Check \r\n                    type=\"radio\" \r\n                    label=\"Stripe\" \r\n                    id=\"Stripe\" \r\n                    name='paymentMethod'\r\n                    value='Stripe'\r\n                    onChange={(e) => setPaymentMethod(e.target.value)}\r\n                    ></Form.Check>*/}\r\n                </Col>\r\n\r\n                </Form.Group>\r\n\r\n\r\n                <Button type=\"submit\" variant='primary' >\r\n                    Continue\r\n                </Button>\r\n\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default PaymentScreen\r\n","import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message' \r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport {createOrder} from '../actions/orderActions'\r\n\r\n\r\n\r\nconst PlaceOrderScreen = ({history}) => {\r\n    const  dispatch = useDispatch()\r\n\r\n\r\n    const cart  = useSelector(state => state.cart)\r\n\r\n//Calculate prices\r\n    const addDecimals = (num) => {\r\n        return (Math.round(num * 100) / 100).toFixed(2)\r\n    }\r\n\r\n    //добавляем в обьект cart поля\r\n    cart.itemsPrice = addDecimals(cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0))\r\n\r\n    cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\r\n\r\n    cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\r\n\r\n    cart.totalPrice = addDecimals((Number(cart.itemsPrice) \r\n    + Number(cart.shippingPrice)\r\n     + Number(cart.taxPrice)).toFixed(2))\r\n\r\n   const orderCreate = useSelector(state => state.orderCreate)\r\n   const {order, success, error} = orderCreate\r\n\r\n//  если заказ оформлен перекидывает на страницу заказа\r\n   useEffect(() => {\r\n       \r\n      if(success) {\r\n          history.push(`/order/${order._id}`)\r\n      }\r\n      // eslint-disable-next-line \r\n   }, [history, success])\r\n\r\n    const placeOrderHandler = () => {\r\n        dispatch(createOrder({\r\n            orderItems: cart.cartItems,\r\n            shippingAddress: cart.shippingAddress,\r\n            paymentMethod: cart.paymentMethod,\r\n            itemsPrice: cart.itemsPrice,\r\n            shippingPrice: cart.shippingPrice,\r\n            taxPrice: cart.taxPrice,\r\n            totalPrice: cart.totalPrice\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant=\"flush\" >\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n                            <p>\r\n                                <strong>Address:</strong>\r\n                                {cart.shippingAddress.address},\r\n                                {cart.shippingAddress.city}, \r\n                                {cart.shippingAddress.postalCode},\r\n                                {cart.shippingAddress.country},\r\n\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <strong>Method: </strong>\r\n                            {cart.paymentMethod}\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {cart.cartItems.length === 0 ? <Message>Your cart is empty</Message> \r\n                            : (<ListGroup variant='flush'>\r\n                                    {cart.cartItems.map((item, index) =>\r\n                                    (\r\n                                    <ListGroup.Item key={index}>\r\n                                        <Row>\r\n                                            <Col md={1}>\r\n                                                <Image src={item.image} alt={item.name} fluid rounded></Image>\r\n                                            </Col>\r\n                                            <Col>\r\n                                                <Link to={`/product/${item.product}`}>\r\n                                                    {item.name}\r\n                                                </Link>\r\n                                            </Col>\r\n                                            <Col md={4}>\r\n                                                {item.qty} x ${item.price} = ${item.qty * item.price}\r\n                                            </Col>\r\n\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n                                    )\r\n                                    )}\r\n                                </ListGroup>\r\n                            )\r\n                            }\r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='Flush'>\r\n\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items</Col>\r\n                                    <Col>${cart.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping</Col>\r\n                                    <Col>${cart.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax</Col>\r\n                                    <Col>${cart.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total</Col>\r\n                                    <Col>${cart.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                {error && <Message variant='danger'>{error}</Message>}\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                 type='button'\r\n                                 className='btn-block'\r\n                                 disabled={cart.cartItems === 0}\r\n                                 onClick={placeOrderHandler} >\r\n                                     PLACE ORDER\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, ListGroup, Image, Card, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message' \r\nimport Loader from '../components/Loader'\r\nimport {getOrderDetails, payOrder, deliverOrder} from '../actions/orderActions'\r\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\r\n\r\n\r\n\r\nconst OrderScreen = ({match, history}) => {\r\n    //console.log(match);\r\n    const orderId = match.params.id\r\n\r\n\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    const  dispatch = useDispatch()\r\n   \r\n// сведенья про заказ из reduser\r\n   const orderDetails = useSelector(state => state.orderDetails)\r\n   const {order, loading, error} = orderDetails\r\n\r\n    // сведенья про заоегистрированого пользователя из reduser\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n   // сведенья про оплату из reduser\r\n   const orderPay = useSelector(state => state.orderPay)\r\n//   loading: loadingPay переназвали переменную, так как она уже существует\r\n   const {success:successPay, loading: loadingPay} = orderPay\r\n\r\n\r\n    // сведенья про оплату из reduser\r\n    const orderDeliver = useSelector(state => state.orderDeliver)\r\n    //   loading: loadingDeliver переназвали переменную, так как она уже существует\r\n       const {success:successDeliver, loading: loadingDeliver} = orderDeliver\r\n\r\n   if(!loading) {\r\n          //Calculate prices\r\n     const addDecimals = (num) => {\r\n        return (Math.round(num * 100) / 100).toFixed(2)\r\n    }\r\n\r\n    //добавляем в обьект cart поля \r\n    order.itemsPrice = addDecimals(order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0))\r\n\r\n   }\r\n//  если заказ оформлен перекидывает на страницу заказа\r\n   useEffect(() => {\r\n    //   если пользователь не зарегистрирован\r\n       if(!userInfo) {\r\n           history.push('/login')\r\n       }\r\n//скрипт для получения клиентского айди с сервера \r\n       const addPayPalScript = async () => {\r\n        //   получаем данные с запроса а с данных айди\r\n           const {data: clientId } = await axios.get('/api/config/paypal')\r\n           const script = document.createElement('script')\r\n           script.type = 'text/javascript'\r\n           script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n           script.async = true\r\n           script.onload = () => {\r\n                setSdkReady(true) \r\n           }\r\n           document.body.appendChild(script)\r\n       }\r\n//если тут нет заказа или он  оплачен\r\n       if(!order || successPay || successDeliver) {\r\n        //   для того чтоб скинуть state и загрузить его заново\r\n        dispatch({type: ORDER_PAY_RESET})\r\n        dispatch({type: ORDER_DELIVER_RESET})\r\n         dispatch(getOrderDetails(orderId))\r\n       } else if(!order.isPaid) {\r\n    //  если заказ не оплачен\r\n\r\n            //если пейпал скрипт не загружен \r\n            if( !window.paypal ) {\r\n                addPayPalScript()\r\n            } else {\r\n                setSdkReady(true)\r\n            }\r\n       }\r\n     \r\n   }, [history, userInfo, dispatch, orderId, successPay, successDeliver, order])\r\n\r\n\r\n  const successPaymentHandler = (paymentResult) => {\r\n    console.log(paymentResult);\r\n    dispatch(payOrder(orderId, paymentResult))\r\n  }\r\n\r\n\r\n const deliverHandler = () => {\r\n    dispatch(deliverOrder(order))\r\n }\r\n\r\n    return loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message> \r\n    : <>\r\n        <h1>Order {order._id}</h1>\r\n\r\n        <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant=\"flush\" >\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n                            <p><strong>Name: </strong> {order.user.name}</p>\r\n                            <p>\r\n                                <strong>Name: </strong> \r\n                                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\r\n                            </p>\r\n\r\n                            <p>\r\n                                <strong>Address:</strong>\r\n                                {order.shippingAddress.address},\r\n                                {order.shippingAddress.city}, \r\n                                {order.shippingAddress.postalCode},\r\n                                {order.shippingAddress.country},\r\n\r\n                            </p>\r\n                            {order.isDelivered ? <Message variant='success'>Delivered on {order.deliveredAt}</Message> \r\n                            : <Message variant='danger'>Not Delivered</Message>}\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {order.paymentMethod}\r\n                            </p>\r\n                            {order.isPaid ? <Message variant='success'>Paid on {order.paidAt}</Message> \r\n                            : <Message variant='danger'>Not Paid</Message>}\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {order.orderItems.length === 0 ? <Message>Order is empty</Message> \r\n                            : (<ListGroup variant='flush'>\r\n                                {/* для того чтоб отобоазить все товары в которые будут оплачены */}\r\n                                    {order.orderItems.map((item, index) =>\r\n                                    (\r\n                                    <ListGroup.Item key={index}>\r\n                                        <Row>\r\n                                            <Col md={1}>\r\n                                                <Image src={item.image} alt={item.name} fluid rounded></Image>\r\n                                            </Col>\r\n                                            <Col>\r\n                                                <Link to={`/product/${item.product}`}>\r\n                                                    {item.name}\r\n                                                </Link>\r\n                                            </Col>\r\n                                            <Col md={4}>\r\n                                                {item.qty} x ${item.price} = ${item.qty * item.price}\r\n                                            </Col>\r\n\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n                                    )\r\n                                    )}\r\n                                </ListGroup>\r\n                            )\r\n                            }\r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='Flush'>\r\n\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items</Col>\r\n                                    <Col>${order.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping</Col>\r\n                                    <Col>${order.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax</Col>\r\n                                    <Col>${order.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total</Col>\r\n                                    <Col>${order.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            {!order.isPaid && (\r\n                                <ListGroup.Item>\r\n                                    {loadingPay && <Loader />}\r\n                                    {!sdkReady ? <Loader /> : (\r\n                                        // количество\r\n                                        <PayPalButton \r\n                                        amount={order.totalPrice} \r\n                                        onSuccess={successPaymentHandler}/>\r\n                                    )}\r\n                                </ListGroup.Item>\r\n                            )}\r\n                            {loadingDeliver && <Loader /> }\r\n                            {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n                                <ListGroup.Item>\r\n                                    <Button type=\"button\" \r\n                                    className='btn btn-block' \r\n                                    onClick={deliverHandler}\r\n                                    >\r\n                                        Mark As Delivered\r\n                                    </Button>\r\n                                </ListGroup.Item>\r\n                            )}\r\n\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n    </>\r\n}\r\n\r\nexport default OrderScreen\r\n","import React, { useEffect,} from 'react'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport { Table, Button,  } from 'react-bootstrap'\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { listUsers, deleteUser } from '../actions/userActions'\r\n\r\n\r\nconst UserListScreen = ({history}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const {error, loading, users} = userList\r\n//получаем на этой страничке userLodin чтоб не разрешать пользователям которые не являються \r\n//админами переходить в адресной строке на страницу с отображжением всех пользователей\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const { success: successDelete } = userDelete\r\n\r\n    useEffect(() => {\r\n        //проверка являеться ли пользователь админом, если нет, то редиректит его со страницы пользователей \r\n        if(userInfo && userInfo.isAdmin) {\r\n            dispatch(listUsers())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n    }, [dispatch, history, userInfo, successDelete])\r\n\r\n\r\n    const deleteHandker = (id) => {\r\n        if(window.confirm('Are you sure')) {\r\n           dispatch(deleteUser(id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n           <h1>Users</h1> \r\n           {loading ? <Loader/> \r\n           : error ? <Message variant='danger'>{error}</Message> \r\n           : (\r\n               <Table striped bordered hover responsive className=\"table-sm\">\r\n                   <thead>\r\n                       <tr>\r\n                           <th>ID</th>\r\n                           <th>NAME</th>\r\n                           <th>EMAIL</th>\r\n                           <th>ADMIN</th>\r\n                           <th></th>\r\n                       </tr>\r\n                   </thead>\r\n                   <tbody>\r\n                       {users.map(user => (\r\n                           <tr key={user._id}>\r\n                               <td>{user._id}</td>\r\n                               <td>{user.name}</td>\r\n                               <td><a href={`mailto:${user.email}`}>{user.email}</a></td>\r\n                               <td>\r\n                                   { user.isAdmin ? (<i className='fas fa-check' style={{color:'green'}}></i>) \r\n                                    : (<i className='fas fa-times' style={{color:'red'}}></i>) }\r\n                               </td>\r\n                               <td>\r\n                                   <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                       <Button variant='light' className='btn-sm'>\r\n                                           <i className='fas fa-edit'></i>\r\n                                       </Button>\r\n                                   </LinkContainer>\r\n                                   <Button variant='danger' \r\n                                   className='btn-sm' \r\n                                   onClick={() => deleteHandker(user._id)}>\r\n                                        <i className='fas fa-trash'></i>\r\n                                   </Button>\r\n                               </td>\r\n                           </tr>\r\n                       ))}\r\n                   </tbody>\r\n               </Table>\r\n           )}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default UserListScreen","import React, {useState, useEffect,} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer' \r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport {  USER_UPDATE_RESET } from '../constants/userConstants'\r\n// форма для входа уже зарегистрированых пользователей пользователя\r\n// useState - поля формы будут частью State\r\nconst UserEditScreen = ({ match, history }) => {\r\n    const userId = match.params.id\r\n\r\n\r\n    //state для полей email password\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const {user, loading, error} = userDetails\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const {success: successUpdate, loading: loadingUpdate, error: errorUpdate} = userUpdate\r\n\r\n    useEffect(() => {\r\n        if(successUpdate) {\r\n            dispatch({type: USER_UPDATE_RESET})\r\n\r\n            //хотим редиректить пользователя,  если данные обновились\r\n            history.push('/admin/userlist')\r\n        } else {\r\n            //если мы не получили пользователя или айди с url адресса не совпадает с айди \r\n            if(!user.name || user._id !== userId) {\r\n                dispatch(getUserDetails(userId))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setIsAdmin(user.isAdmin)\r\n            }\r\n        }  \r\n    }, [dispatch, history, userId, user, successUpdate])\r\n\r\n    //console.log(redirect);\r\n\r\n    const submitHandler = (e) => {\r\n        // не перезагружаеться\r\n        e.preventDefault()\r\n        dispatch(updateUser({ _id:userId, name, email, isAdmin}))\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Link to='admin/user/userlist' className='btn btn-light my-3' >Go Back</Link>\r\n\r\n            <FormContainer>\r\n            <h1>Edit User</h1>\r\n            { loadingUpdate && <Loader/> }\r\n            { errorUpdate && <Message varaint='daner'>{errorUpdate}</Message>}\r\n            { loading ? <Loader /> : error \r\n            ? <Message variant='danger'>{Error}</Message> \r\n            : (\r\n                <Form onSubmit={submitHandler} >\r\n\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name </Form.Label>\r\n                    <Form.Control\r\n                     type='name'\r\n                     placeholder='Enter name'\r\n                     value={name}\r\n                     onChange={(e) => setName(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Adress</Form.Label>\r\n                    <Form.Control\r\n                     type='email'\r\n                     placeholder='Enter email'\r\n                     value={email}\r\n                     onChange={(e) => setEmail(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='isadmin'>\r\n                    <Form.Check\r\n                     type='checkbox'\r\n                     label='Is Admin'\r\n                     checked={isAdmin}\r\n                     onChange={(e) => setIsAdmin(e.target.checked)}></Form.Check>\r\n                </Form.Group>\r\n  \r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Update\r\n                </Button>\r\n            </Form>\r\n            )}\r\n            \r\n\r\n        </FormContainer>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default UserEditScreen\r\n\r\n","import React, { useEffect,} from 'react'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport Paginate from '../components/Paginate'\r\nimport { listProducts, deleteProduct, createProduct} from '../actions/productActions'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\n\r\nconst ProductListScreen = ({history, match}) => {\r\n    const pageNumber = match.params.pageNumber || 1\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const {error, loading, products, pages, page} = productList\r\n//получаем на этой страничке userLodin чтоб не разрешать пользователям которые не являються \r\n//админами переходить в адресной строке на страницу с отображжением всех пользователей\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const { error : errorDelete, loading : loadingDelete, success: successDelete } = productDelete\r\n\r\n    const productCreate = useSelector(state => state.productCreate)\r\n    const { \r\n        error : errorCreate, \r\n        loading : loadingCreate, \r\n        success: successCreate, \r\n        product: createdProduct,\r\n     } = productCreate\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch({ type: PRODUCT_CREATE_RESET })\r\n        //если пользователь не админ\r\n        if(!userInfo.isAdmin) {\r\n            history.push('/login')\r\n        } \r\n\r\n        if(successCreate) {\r\n            history.push(`/admin/product/${createdProduct._id}/edit`)\r\n        } else {\r\n            dispatch(listProducts('', pageNumber))\r\n        }\r\n\r\n\r\n        //добавили successDelete в зависимости чтоб useEffect срабатывал и перезагружал стейь\r\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct, pageNumber])\r\n\r\n   \r\n\r\n    const deleteHandker = (id) => {\r\n        if(window.confirm('Are you sure')) {\r\n            dispatch(deleteProduct(id))\r\n        }\r\n    }\r\n\r\n\r\n    const createProductHandler = () => {\r\n        dispatch(createProduct())\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className='align-items-centre'>\r\n                <Col>\r\n                    <h1>Products</h1>\r\n                </Col>\r\n                <Col className='text-right'>\r\n                    <Button className='my-3' onClick={createProductHandler}>\r\n                        <i className='fas fa-plus'></i>\r\n                        Create Product\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            {loadingDelete && <Loader /> }\r\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n            {loadingCreate && <Loader /> }\r\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n           { loading ? (<Loader/> )\r\n           : error ? (<Message variant='danger'>{error}</Message>) \r\n           : (\r\n               <>\r\n               <Table striped bordered hover responsive className=\"table-sm\">\r\n                   <thead>\r\n                       <tr>\r\n                           <th>ID</th>\r\n                           <th>NAME</th>\r\n                           <th>PRICE</th>\r\n                           <th>CATEGORY</th>\r\n                           <th>BRAND</th>\r\n                           <th></th>\r\n                       </tr>\r\n                   </thead>\r\n                   <tbody>\r\n                       {products.map(product => (\r\n                           <tr key={product._id}>\r\n                               <td>{product._id}</td>\r\n                               <td>{product.name}</td>\r\n                               <td>${product.price}</td>\r\n                               <td>{product.category}</td>\r\n                               <td>{product.brand}</td>\r\n                               <td>\r\n                                   {/* кнопка добавления информации про продукт */}\r\n                                   <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                                       <Button variant='light' className='btn-sm'>\r\n                                           <i className='fas fa-edit'></i>\r\n                                       </Button>\r\n                                   </LinkContainer>\r\n                                   <Button variant='danger' \r\n                                   className='btn-sm' \r\n                                   onClick={() => deleteHandker(product._id)}>\r\n                                        <i className='fas fa-trash'></i>\r\n                                   </Button>\r\n                               </td>\r\n                           </tr>\r\n                       ))}\r\n                   </tbody>\r\n               </Table>\r\n               <Paginate pages={pages} page={page} isAdmin={true} />\r\n               </>\r\n           )}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ProductListScreen\r\n\r\n\r\n\r\n\r\n//useEffect(() => {\r\n//    dispatch({ type: PRODUCT_CREATE_RESET })\r\n//    //проверка являеться ли пользователь админом, если нет, то редиректит его со страницы пользователей \r\n//    if(userInfo && userInfo.isAdmin) {\r\n//        dispatch(listProducts())\r\n//    } else {\r\n//        history.push('/login')\r\n//    }\r\n//    //добавили successDelete в зависимости чтоб useEffect срабатывал и перезагружал стейь\r\n//    console.log(successDelete);\r\n//}, [dispatch, history, userInfo, successDelete])","import axios from 'axios'\r\nimport React, {useState, useEffect,} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer' \r\nimport { listProductsDetails, updateProduct } from '../actions/productActions'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\n\r\n// форма для входа уже зарегистрированых пользователей пользователя\r\n// useState - поля формы будут частью State\r\nconst ProductEditScreen = ({ match, history }) => {\r\n    //получаем айди с url адресса\r\n    const productId = match.params.id\r\n\r\n\r\n    //state для полей email password\r\n    const [name, setName] = useState('')\r\n    const [price, setPrice] = useState(0)\r\n    const [image, setImage] = useState('')\r\n    const [brand, setBrand] = useState('')\r\n    const [category, setCategory] = useState('')\r\n    const [countInStock, setCountInStock] = useState(0)\r\n    const [description, setDescription] = useState('')\r\n    // для загрузки файла будет true в процесе загрузки, а после снова false\r\n    const [uploading, setUploading] = useState(false)\r\n\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const {product, loading, error} = productDetails\r\n\r\n    const productUpdate = useSelector(state => state.productUpdate)\r\n    const { error: errorUpdate, loading : loadingUpdate, success: successUpdate} = productUpdate\r\n\r\n    //console.log(productDetails);\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if(successUpdate) {\r\n              dispatch({type: PRODUCT_UPDATE_RESET})\r\n              history.push('/admin/productlist')\r\n        } else {\r\n             //если мы не получили пользователя или айди с url адресса не совпадает с айди \r\n             if(!product.name || product._id !== productId) {\r\n                dispatch(listProductsDetails(productId))\r\n            } else {\r\n                setName(product.name)\r\n                setPrice(product.price)\r\n                setImage(product.image)\r\n                setBrand(product.brand)\r\n                setCategory(product.category)\r\n                setCountInStock(product.countInStock)\r\n                setDescription(product.description)\r\n            }\r\n        }\r\n               \r\n    }, [dispatch, history, productId, product, successUpdate])\r\n\r\n\r\n    const uploadFileHandler = async (e) => {\r\n        //при загрузке файла получаем доступ к файлам, которые являються массивом, посколько мы можем загрузить несколько файлов\r\n        // поскольку мы загружаем один файл берем первый файл с массива\r\n        const file = e.target.files[0]\r\n        //для получения значения пар значение-ключ\r\n        const formData = new FormData()\r\n        //для создания нового поля image и добавления к нему значения file\r\n        formData.append('image', file)\r\n        setUploading(true)\r\n\r\n        try {\r\n            const config ={\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }\r\n//получаем обратно путь к файлу\r\n            const {data} = await axios.post('/api/upload', formData, config)\r\n\r\n            setImage(data)\r\n            setUploading(false)\r\n        } catch (error){\r\n            console.log(error)\r\n            setUploading(false)\r\n        }\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        // не перезагружаеться\r\n        e.preventDefault()\r\n        dispatch(updateProduct({\r\n            _id: productId,\r\n            name,\r\n            price, \r\n            image,\r\n            category,\r\n            brand,\r\n            countInStock,\r\n            description\r\n        }))\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Link to='/admin/productlist' className='btn btn-light my-3' >Go Back</Link>\r\n\r\n            <FormContainer>\r\n            <h1>Edit Product</h1>\r\n            { loadingUpdate && <Loader />}\r\n            {errorUpdate && <Message variant='danger' >{errorUpdate}</Message>}\r\n            { loading ? <Loader /> : error \r\n            ? <Message variant='danger'>{Error}</Message> \r\n            : (\r\n                <Form onSubmit={submitHandler} >\r\n\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name </Form.Label>\r\n                    <Form.Control\r\n                     type='name'\r\n                     placeholder='Enter name'\r\n                     value={name}\r\n                     onChange={(e) => setName(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='price'>\r\n                    <Form.Label>Price </Form.Label>\r\n                    <Form.Control\r\n                     type='number'\r\n                     placeholder='Enter price'\r\n                     value={price}\r\n                     onChange={(e) => setPrice(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='image'>\r\n                    <Form.Label>Image </Form.Label>\r\n                    <Form.Control\r\n                     type='text'\r\n                     placeholder='Enter image url'\r\n                     value={image}\r\n                     onChange={(e) => setImage(e.target.value)}></Form.Control>\r\n                     <Form.File id='image-file' label='Choose file' custom \r\n                     onChange={uploadFileHandler}></Form.File>\r\n                     {uploading && <Loader/>}\r\n                </Form.Group>\r\n\r\n\r\n                <Form.Group controlId='brand'>\r\n                    <Form.Label>Brand </Form.Label>\r\n                    <Form.Control\r\n                     type='text'\r\n                     placeholder='Enter brand'\r\n                     value={brand}\r\n                     onChange={(e) => setBrand(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='category'>\r\n                    <Form.Label>Category </Form.Label>\r\n                    <Form.Control\r\n                     type='text'\r\n                     placeholder='Enter category'\r\n                     value={category}\r\n                     onChange={(e) => setCategory(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n\r\n                <Form.Group controlId='countInStock'>\r\n                    <Form.Label>Count In Stock </Form.Label>\r\n                    <Form.Control\r\n                     type='number'\r\n                     placeholder='Enter count in stock'\r\n                     value={countInStock}\r\n                     onChange={(e) => setCountInStock(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n\r\n                <Form.Group controlId='description'>\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control\r\n                     type='text'\r\n                     placeholder='Enter description'\r\n                     value={description}\r\n                     onChange={(e) => setDescription(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n  \r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Update\r\n                </Button>\r\n            </Form>\r\n            )}\r\n            \r\n\r\n        </FormContainer>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default ProductEditScreen\r\n\r\n","import React, { useEffect,} from 'react'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport { Table, Button,  } from 'react-bootstrap'\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { listOrders } from '../actions/orderActions'\r\n\r\n\r\nconst OrderListScreen = ({history}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector(state => state.orderList)\r\n    const {error, loading, orders} = orderList\r\n//получаем на этой страничке userLodin чтоб не разрешать пользователям которые не являються \r\n//админами переходить в адресной строке на страницу с отображжением всех пользователей\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    //const userDelete = useSelector(state => state.userDelete)\r\n    //const { success: successDelete } = userDelete\r\n\r\n    useEffect(() => {\r\n        //проверка являеться ли пользователь админом, если нет, то редиректит его со страницы пользователей \r\n        if(userInfo && userInfo.isAdmin) {\r\n            //console.log('hello');\r\n            dispatch(listOrders())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n    }, [dispatch, history, userInfo])\r\n\r\n\r\n \r\n\r\n    return (\r\n        <>\r\n           <h1>Orders</h1> \r\n           {loading ? <Loader/> \r\n           : error ? <Message variant='danger'>{error}</Message> \r\n           : (\r\n               <Table striped bordered hover responsive className=\"table-sm\">\r\n                   <thead>\r\n                       <tr>\r\n                           <th>ID</th>\r\n                           <th>USER</th>\r\n                           <th>DATE</th>\r\n                           <th>TOTAL</th>\r\n                           <th>PAID</th>\r\n                           <th>DELIVERED</th>\r\n                           <th></th>\r\n                       </tr>\r\n                   </thead>\r\n                   <tbody>\r\n                       {orders.map(order => (\r\n                           <tr key={order._id}>\r\n                               <td>{order._id}</td>\r\n                               <td>{order.user && order.user.name}</td>\r\n                               <td>{order.createdAt.substring(0,10)}</td>\r\n                               <td>{order.totalPrice}</td>\r\n                               <td>\r\n                                   { order.isPaid ? (\r\n                                    order.paidAt.substring(0,10)) \r\n                                    : (<i className='fas fa-times' style={{color:'red'}}></i>) }\r\n                               </td>\r\n                               <td>\r\n                                   { order.isDelivered ? (\r\n                                    order.deliveredAt.substring(0,10)) \r\n                                    : (<i className='fas fa-times' style={{color:'red'}}></i>) }\r\n                               </td>\r\n                               <td>\r\n                                   <LinkContainer to={`/order/${order._id}`}>\r\n                                       <Button variant='light' className='btn-sm'>\r\n                                           Details\r\n                                       </Button>\r\n                                   </LinkContainer>\r\n                                   \r\n                               </td>\r\n                           </tr>\r\n                       ))}\r\n                   </tbody>\r\n               </Table>\r\n           )}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default OrderListScreen","import React from 'react';\n//BrowserRouter - для управления историеей \nimport { BrowserRouter as Router, Route } from  'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport HomeScreen from './screens/HomeScreen';\nimport ProductScreen from './screens/ProductScreen';\nimport CartScreen from './screens/CartScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport RegisterScreen from './screens/RegisterScreen';\nimport ProfileScreen from './screens/ProfileScreen';\nimport ShippingScreen from './screens/ShippingScreen';\nimport PaymentScreen from './screens/PaymentScreen';\nimport PlaceOrderScreen from './screens/PlaceOrderScreen';\nimport OrderScreen from './screens/OrderScreen';\nimport UserListScreen from './screens/UserListScreen';\nimport UserEditScreen from './screens/UserEditScreen';\nimport ProductListScreen from './screens/ProductListScreen';\nimport ProductEditScreen from './screens/ProductEditScreen';\nimport OrderListScreen from './screens/OrderListScreen';\n\n\n\n\n\n\nconst App = () => {\n  return (\n    <Router >\n      <Header />\n        <main className=\"py-3\">\n          <Container >\n           <Route path='/order/:id' component={OrderScreen}  />\n            <Route path='/shipping' component={ShippingScreen}  />\n            <Route path='/payment' component={PaymentScreen}  />\n            <Route path='/placeorder' component={PlaceOrderScreen}  />\n            <Route path='/login' component={LoginScreen}  />\n            <Route path='/register' component={RegisterScreen}  />\n            <Route path='/profile' component={ProfileScreen}  />\n            <Route path='/product/:id' component={ProductScreen}  />\n\n            {/* знак вопроса как опциональный параметр, строка запроса */}\n            <Route path='/cart/:id?' component={CartScreen}  />\n            <Route path='/admin/userlist' component={UserListScreen}  />\n            <Route path='/admin/user/:id/edit' component={UserEditScreen}  />\n            <Route path='/admin/productlist' component={ProductListScreen} exact />\n            {/* для перехода по страницам списка продуктов для админа */}\n            <Route path='/admin/productlist/:pageNumber' component={ProductListScreen} exact />\n            <Route path='/admin/product/:id/edit' component={ProductEditScreen}  />\n            <Route path='/admin/ordertlist' component={OrderListScreen}  />\n            {/* для поиска по продуктам на главной странице */}\n            <Route path='/search/:keyword' component={HomeScreen} exact />\n            {/* для перехода на следующую страницу продуктов */}\n            <Route path='/page/:pageNumber' component={HomeScreen}  exact />\n            <Route path='/search/:keyword/page/:pageNumber' component={HomeScreen}  exact/>\n\n            <Route path='/' component={HomeScreen} exact />\n\n          </Container>\n        </main> \n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport './bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}